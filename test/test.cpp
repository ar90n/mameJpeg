#include <cstdlib>

#define CATCH_CONFIG_MAIN
#include "catch.hpp"

#include "../mameJpeg.h"
#include "../../mameBitmap/mameBitmap.h"

uint8_t jpeg_test_pattern_binary[] = {
0xff,0xd8,0xff,0xe0,0x00,0x10,0x4a,0x46,0x49,0x46,0x00,0x01,0x01,0x01,0x00,0x48,0x00,0x48,0x00,0x00,0xff,0xdb,0x00,0x43,0x00,0x03,0x02,0x02,0x03,0x02,0x02,0x03,
0x03,0x03,0x03,0x04,0x03,0x03,0x04,0x05,0x08,0x05,0x05,0x04,0x04,0x05,0x0a,0x07,0x07,0x06,0x08,0x0c,0x0a,0x0c,0x0c,0x0b,0x0a,0x0b,0x0b,0x0d,0x0e,0x12,0x10,0x0d,
0x0e,0x11,0x0e,0x0b,0x0b,0x10,0x16,0x10,0x11,0x13,0x14,0x15,0x15,0x15,0x0c,0x0f,0x17,0x18,0x16,0x14,0x18,0x12,0x14,0x15,0x14,0xff,0xc0,0x00,0x0b,0x08,0x00,0x10,
0x00,0x10,0x01,0x01,0x11,0x00,0xff,0xc4,0x00,0x15,0x00,0x01,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0xff,0xc4,0x00,
0x2b,0x10,0x00,0x00,0x03,0x02,0x0c,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x13,0x14,0x15,0x00,0x12,0x09,0x17,0x19,0x22,0x26,0x35,0x39,0x42,0x64,
0x67,0x85,0x94,0x44,0x47,0x62,0x84,0xa6,0xc4,0xe4,0xff,0xda,0x00,0x08,0x01,0x01,0x00,0x00,0x3f,0x00,0x96,0x2e,0x67,0x14,0x65,0x68,0x69,0xc9,0xfb,0x91,0x44,0x3f,
0xd0,0xe8,0x57,0x9e,0x9a,0xab,0xb0,0x45,0x7b,0x72,0xe1,0x6d,0x82,0x0c,0x86,0x14,0x24,0xfe,0x01,0x3e,0x8a,0xa0,0x31,0xe7,0x66,0x89,0xef,0xb2,0x43,0x1c,0xec,0xf1,
0x4f,0xb5,0xbf,0xff,0xd9 };

uint8_t jpeg_test_pattern_binary_expect[] = {
0,0,0,0,255,255,255,255,0,255,0,255,0,255,0,255,0,0,0,0,255,255,255,255,255,
0,255,0,255,0,255,0,0,0,0,0,255,255,255,255,0,255,0,255,0,255,0,255,0,0,0,0,255,
255,255,255,255,0,255,0,255,0,255,0,255,255,255,255,0,0,0,0,0,255,0,255,0,255,
0,255,255,255,255,255,0,0,0,0,255,0,255,0,255,0,255,0,255,255,255,255,0,0,0,0,
0,255,0,255,0,255,0,255,255,255,255,255,0,0,0,0,255,0,255,0,255,0,255,0,0,0,0,
0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,
0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,
0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,0,0,0,0,255,255,255,255,
255,255,255,255,255,255,255,255,0,0,0,0,255,255,255,255,255,255,255,255,255,
255,255,255,0,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255
};

uint8_t jpeg_test_pattern_grayscale[] = {
0xff,0xd8,0xff,0xe0,0x00,0x10,0x4a,0x46,0x49,0x46,0x00,0x01,0x01,0x01,0x00,0x48,0x00,0x48,0x00,0x00,0xff,0xdb,0x00,0x43,0x00,0x01,0x01,0x01,0x01,0x01,0x01,0x01,
0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,
0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0xff,0xc0,0x00,0x0b,0x08,0x00,0x10,
0x00,0x10,0x01,0x01,0x11,0x00,0xff,0xc4,0x00,0x16,0x00,0x01,0x01,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0a,0x06,0x08,0xff,0xc4,
0x00,0x32,0x10,0x00,0x00,0x03,0x04,0x05,0x08,0x0b,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x15,0x16,0x17,0x01,0x06,0x07,0x18,0x00,0x05,0x08,0x11,0x45,0x02,
0x04,0x09,0x13,0x14,0x1a,0x21,0x31,0x12,0x24,0x26,0x41,0x65,0x66,0x69,0x71,0x84,0x98,0xc4,0xff,0xda,0x00,0x08,0x01,0x01,0x00,0x00,0x3f,0x00,0xdd,0xd1,0xda,0x3b,
0xee,0xb8,0x95,0x7b,0x29,0x3c,0x53,0xc2,0x3d,0x8e,0xcb,0x6a,0x61,0x2d,0xa0,0x7e,0x0b,0x1f,0xcf,0x07,0x85,0xff,0x00,0xcb,0x25,0xc2,0xce,0x34,0x35,0xd4,0x2c,0x21,
0x5e,0x41,0x25,0xc7,0x71,0xeb,0x2d,0x59,0x07,0x62,0xac,0xad,0x3b,0x52,0x0a,0xea,0x52,0x50,0xf2,0x85,0x90,0xdc,0xfc,0xd0,0xbe,0x3e,0x1b,0xa3,0xc8,0x18,0x86,0x85,
0x6c,0x44,0xe5,0x4d,0xc5,0x4a,0xd0,0xa0,0xa9,0x6d,0xb1,0x6c,0xa7,0xa7,0xfa,0x27,0xd4,0xd3,0x89,0x8b,0x7c,0x0f,0xd9,0x42,0x4d,0xba,0x59,0xea,0x10,0xdf,0xa9,0xbe,
0xfc,0x6e,0x99,0xbb,0xdb,0xcb,0x93,0x2f,0x6f,0x16,0x77,0x37,0xa5,0x4f,0xff,0xd9 };

uint8_t jpeg_test_pattern_grayscale_expect[] = {
92,88,91,93,255,255,255,255,20,247,30,241,69,238,198,248,88,90,92,96,252,255,
255,255,246,78,221,222,220,49,229,67,92,92,90,92,255,255,255,255,26,227,51,220,
90,218,221,237,93,96,91,100,249,255,254,255,243,89,211,233,208,58,216,71,255,
253,255,250,31,25,29,26,27,222,57,210,100,212,226,235,255,255,255,255,24,25,26,
26,244,84,218,224,218,51,221,69,255,255,255,254,28,27,24,23,24,233,48,222,88,
220,214,240,255,255,255,255,26,27,23,27,251,64,238,203,239,31,244,58,239,239,
239,239,255,255,255,255,57,57,57,57,58,57,57,57,239,239,239,239,255,255,255,
255,56,56,56,56,56,56,56,56,239,239,239,239,255,255,255,255,56,56,56,55,55,56,
56,56,239,239,239,239,255,255,255,255,51,53,52,52,52,52,53,51,239,239,239,239,
255,255,255,255,255,255,255,255,255,255,255,255,239,239,239,239,255,255,255,
255,255,255,255,255,255,254,255,255,239,239,239,239,255,255,255,255,255,255,
255,254,255,255,255,254,239,239,239,239,255,255,255,255,255,255,255,255,254,
254,255,255 };

uint8_t jpeg_test_pattern_color_420[] = {
0xff,0xd8,0xff,0xe0,0x00,0x10,0x4a,0x46,0x49,0x46,0x00,0x01,0x01,0x01,0x00,0x48,0x00,0x48,0x00,0x00,0xff,0xdb,0x00,0x43,0x00,0x01,0x01,0x01,0x01,0x01,0x01,0x01,
0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,
0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0xff,0xdb,0x00,0x43,0x01,0x01,0x01,
0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,
0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0xff,0xc0,
0x00,0x11,0x08,0x00,0x10,0x00,0x10,0x03,0x01,0x22,0x00,0x02,0x11,0x01,0x03,0x11,0x01,0xff,0xc4,0x00,0x16,0x00,0x01,0x01,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x0a,0x07,0x08,0xff,0xc4,0x00,0x2d,0x10,0x00,0x00,0x04,0x04,0x04,0x01,0x0d,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x03,
0x04,0x05,0x02,0x06,0x07,0x08,0x00,0x11,0x12,0x15,0x16,0x09,0x0a,0x13,0x17,0x18,0x1a,0x25,0x31,0x58,0x85,0x98,0xb2,0xd7,0xff,0xc4,0x00,0x15,0x01,0x01,0x01,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x06,0x07,0xff,0xc4,0x00,0x1d,0x11,0x00,0x01,0x05,0x01,0x01,0x01,0x01,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x04,0x01,0x02,0x03,0x05,0x06,0x07,0x14,0x12,0x34,0xff,0xda,0x00,0x0c,0x03,0x01,0x00,0x02,0x11,0x03,0x11,0x00,0x3f,0x00,0xdf,0xb5,0x56,0xab,
0x43,0xcd,0x8b,0x85,0x84,0x36,0x01,0xbd,0xa0,0xbd,0xb8,0x9d,0x04,0x07,0x76,0x0b,0x6f,0xea,0xcf,0xb3,0x7e,0xdd,0x9e,0x7e,0x19,0x5e,0xe3,0x9d,0x06,0x74,0x8a,0xbd,
0x80,0xe7,0xaa,0x57,0xe1,0xee,0x17,0x10,0xc9,0xe8,0x5e,0xb5,0x36,0x57,0xe4,0x28,0xa5,0xc9,0x5e,0x55,0x91,0x0f,0xd4,0x44,0x8c,0x6a,0x37,0x5a,0x8e,0xcc,0xa0,0xe8,
0x52,0x11,0x4c,0x14,0x22,0x32,0x4b,0xb6,0xa4,0xc9,0x4b,0x64,0x30,0xc3,0x89,0xb1,0x33,0x5a,0x53,0xc9,0xab,0x28,0xb2,0x34,0xdb,0x2c,0x4b,0xe4,0x88,0x29,0x71,0x14,
0x2c,0xbe,0x82,0x8f,0xd9,0x64,0x36,0x86,0x99,0xaf,0x90,0x11,0x1f,0x52,0xaf,0x37,0xef,0x6c,0xfb,0x39,0xe0,0xd5,0x77,0x63,0x87,0xd6,0xf0,0xfc,0x6d,0x1f,0xdf,0x70,
0xcf,0x8c,0xd1,0xf2,0x2b,0x4e,0x57,0x26,0x26,0xcf,0x42,0xde,0x4b,0x59,0x14,0xe5,0x13,0x1b,0xdf,0x59,0xa7,0xde,0x36,0xfe,0x42,0xc5,0xda,0x80,0xcf,0xa0,0xa2,0x26,
0x31,0x44,0x5a,0x52,0xee,0xc6,0x39,0x24,0x35,0xd2,0xcb,0x32,0xfe,0x07,0x0c,0x4c,0x50,0x90,0x3d,0x87,0x8d,0x3b,0x90,0x74,0x6c,0xe0,0xc7,0x74,0x3d,0xb2,0x72,0x4b,
0x20,0x6c,0xab,0x0a,0x94,0xd5,0xcd,0x5e,0xef,0x13,0x68,0x0c,0x56,0xb6,0x5e,0xf0,0x94,0x4a,0xc4,0x10,0x6a,0x5f,0x00,0x61,0xd7,0x8a,0x91,0x90,0xd9,0x6b,0xed,0x3d,
0x7f,0x47,0x8a,0x53,0x04,0x6c,0x6d,0xff,0xd9 };

uint8_t jpeg_test_pattern_color_420_expect[] = {
98,100,1,94,96,0,100,97,3,101,98,3,251,255,248,251,255,248,255,251,255,255,252,255,29,14,117,253,238,255,53,31,56,252,230,255,93,85,77,255,253,244,148,163,115,243,255,209,
94,96,0,96,98,0,100,98,3,103,101,6,251,255,248,251,255,248,255,251,255,255,251,255,253,238,255,92,77,180,255,245,255,174,152,178,255,253,245,35,27,18,249,255,215,82,97,48,
99,99,3,99,98,3,95,98,5,95,98,5,255,252,254,255,253,255,252,254,255,253,255,255,64,13,86,255,231,255,56,63,27,254,255,226,83,103,145,235,255,255,199,146,132,255,239,224,
99,99,4,101,101,6,95,98,5,102,106,13,255,253,254,255,253,255,253,255,255,253,255,255,255,231,255,129,78,151,254,255,225,167,173,138,235,255,255,9,30,71,255,240,225,130,77,62,
254,255,250,252,253,248,255,253,252,252,247,246,99,8,99,93,3,94,96,3,103,94,2,102,51,16,109,255,234,255,69,63,58,255,253,248,107,106,126,252,251,255,208,186,162,255,250,225,
254,255,250,254,255,250,255,253,252,255,254,252,93,2,93,92,1,92,94,1,102,94,1,102,255,234,255,111,77,170,255,253,248,169,163,159,252,252,255,27,27,47,255,250,225,107,86,61,
252,255,255,253,255,255,254,255,253,253,255,253,98,3,97,96,2,96,87,5,92,87,4,92,75,5,86,255,202,255,58,61,25,255,255,223,83,103,146,234,254,255,203,140,129,255,236,225,
252,255,255,253,255,255,254,255,253,254,255,254,96,1,96,95,1,95,86,3,91,88,5,93,255,219,255,124,54,135,238,242,206,157,160,124,219,239,255,12,32,75,255,224,213,128,65,54,
200,253,201,199,252,200,201,253,202,200,252,201,255,254,255,255,254,255,255,250,255,255,250,255,198,4,184,198,4,184,193,7,183,193,7,183,188,5,207,188,5,207,210,0,195,210,0,195,
200,253,201,199,252,200,201,253,202,200,252,201,255,254,255,255,254,255,255,250,255,255,250,255,197,3,183,197,3,183,191,6,182,191,6,182,187,4,206,187,4,206,209,0,194,209,0,194,
199,255,199,197,254,197,200,254,201,199,252,200,252,255,252,252,255,252,255,251,255,255,251,255,186,7,190,186,7,190,197,0,199,197,0,199,197,2,190,197,2,190,190,5,194,190,5,194,
199,255,199,197,254,197,200,254,201,199,252,200,252,255,252,252,255,252,255,251,255,255,251,255,186,7,189,186,7,189,197,0,199,197,0,199,197,2,189,197,2,189,190,4,193,190,4,193,
198,255,199,197,254,198,200,254,201,199,252,199,253,255,254,253,255,254,255,254,255,255,254,255,255,251,255,255,251,255,255,251,255,255,251,255,255,251,255,255,251,255,255,250,255,255,250,255,
198,255,199,197,254,198,200,254,201,199,252,199,253,255,254,253,255,254,255,254,255,255,254,255,255,251,255,255,251,255,255,252,255,255,252,255,255,251,255,255,251,255,255,250,255,255,250,255,
199,255,199,197,254,198,200,254,200,199,252,199,253,255,253,253,255,253,255,254,255,255,254,255,253,255,254,253,255,254,254,254,254,254,254,254,254,255,253,254,255,253,252,255,252,252,255,252,
199,255,199,197,254,198,200,254,200,199,252,199,253,255,253,253,255,253,255,254,255,255,254,255,253,255,254,253,255,254,254,255,255,254,255,255,254,255,253,254,255,253,253,255,252,253,255,252 };

uint8_t jpeg_test_pattern_color_422h[] = {
0xff,0xd8,0xff,0xe0,0x00,0x10,0x4a,0x46,0x49,0x46,0x00,0x01,0x01,0x01,0x00,0x48,0x00,0x48,0x00,0x00,0xff,0xdb,0x00,0x43,0x00,0x01,0x01,0x01,0x01,0x01,0x01,0x01,
0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,
0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0xff,0xdb,0x00,0x43,0x01,0x01,0x01,
0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,
0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0xff,0xc0,
0x00,0x11,0x08,0x00,0x10,0x00,0x10,0x03,0x01,0x21,0x00,0x02,0x11,0x01,0x03,0x11,0x01,0xff,0xc4,0x00,0x16,0x00,0x01,0x01,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x0a,0x06,0x09,0xff,0xc4,0x00,0x32,0x10,0x00,0x00,0x02,0x06,0x06,0x06,0x0b,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x15,0x16,
0x01,0x06,0x07,0x14,0x17,0x18,0x00,0x03,0x05,0x08,0x11,0x45,0x04,0x09,0x12,0x1a,0x21,0x31,0x13,0x24,0x26,0x41,0x65,0x66,0x68,0x71,0x85,0x98,0xc5,0xff,0xc4,0x00,
0x16,0x01,0x01,0x01,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0x03,0x06,0xff,0xc4,0x00,0x2a,0x11,0x00,0x00,0x05,0x02,0x03,0x07,
0x05,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x05,0x06,0x14,0x15,0x16,0x07,0x13,0x04,0x08,0x17,0x03,0x11,0x12,0x18,0x26,0x43,0x65,0x22,0x23,0x45,0x46,0x63,
0x64,0xff,0xda,0x00,0x0c,0x03,0x01,0x00,0x02,0x11,0x03,0x11,0x00,0x3f,0x00,0xd0,0x06,0xae,0xd6,0x37,0x60,0x00,0x3b,0x3f,0x3b,0x93,0xb8,0x2b,0x9b,0x4b,0x84,0x31,
0x97,0x00,0xdf,0x0c,0x6f,0x87,0x73,0xbc,0x7d,0xf2,0xd1,0x74,0xb5,0x9c,0x8c,0xf5,0x1b,0x06,0x79,0x56,0x50,0x56,0xd4,0xfa,0xfe,0x88,0x92,0xe3,0x6c,0x34,0xfb,0x35,
0xe1,0xde,0x18,0x87,0x94,0xee,0xcc,0xaf,0xe8,0xe1,0x2f,0x80,0xf7,0x16,0x06,0x23,0xc0,0xb7,0x62,0xf1,0x85,0x44,0x86,0x10,0x2d,0xc2,0x0e,0xdc,0xe6,0x54,0x4a,0x5a,
0xa8,0xe8,0x5e,0xa7,0x7a,0x71,0x97,0x0c,0x09,0x6a,0x48,0xfa,0xfa,0x22,0x39,0xb7,0x69,0xb6,0x8d,0xc5,0x8c,0x0a,0xa8,0x8b,0x28,0x8a,0x4d,0x87,0x64,0x4d,0x3b,0x9c,
0xd6,0x68,0x85,0x56,0x8c,0x36,0xc8,0x24,0x34,0x5d,0xb3,0x55,0xe9,0xfa,0x66,0x2c,0xb3,0x68,0xbe,0x51,0x32,0xf1,0xab,0x9c,0x99,0x42,0x80,0xdb,0x1b,0x14,0x6f,0xe2,
0x19,0xdb,0x03,0xc7,0xb8,0xd9,0x0c,0x12,0x29,0x52,0x6b,0x30,0xd6,0x43,0xec,0xad,0x13,0x5f,0x2e,0x39,0x93,0x6c,0x8a,0x12,0x13,0x63,0x2a,0xcf,0xfe,0x2f,0xf5,0x28,
0x6a,0xb7,0x62,0xfd,0x72,0xa7,0xeb,0x27,0xbf,0x1c,0x26,0x1f,0x14,0xf2,0xe4,0x8c,0x53,0xc5,0x1d,0xc9,0xda,0xa2,0xe6,0x56,0xab,0xc6,0x89,0x97,0x86,0x7a,0x56,0x4d,
0x24,0x41,0xf3,0x8c,0xc8,0x9a,0x71,0x83,0x5e,0x1c,0x59,0x4a,0x87,0x1f,0xc2,0xd5,0x9e,0xed,0xcf,0x46,0xbb,0x25,0xb9,0x98,0xe5,0xd8,0xaa,0x3f,0xd1,0x33,0x09,0x73,
0x67,0xd9,0x23,0xed,0xec,0x58,0xf3,0x0f,0x81,0x1b,0x56,0xa9,0xd7,0xf9,0xac,0x27,0xef,0x5d,0xf6,0xff,0x00,0xff,0xd9 };

uint8_t jpeg_test_pattern_color_422h_expect[] = {
97,100,0,93,96,0,103,96,6,102,95,5,248,255,244,248,255,245,255,249,255,255,246,255,0,24,163,207,240,255,73,9,123,255,207,255,138,81,23,255,228,170,103,206,115,186,255,198,
96,94,0,97,96,0,94,102,0,96,105,0,255,248,255,255,251,255,242,255,246,243,255,248,255,202,242,185,57,97,194,255,109,161,224,76,152,235,255,0,74,166,255,177,206,198,38,67,
98,100,0,98,100,0,101,94,5,100,94,4,250,255,246,250,255,247,255,246,255,255,246,255,0,32,170,186,221,255,94,28,142,252,186,255,159,102,43,255,207,148,124,227,137,176,255,188,
100,99,0,103,102,3,93,100,0,101,108,5,255,245,254,255,254,255,237,255,241,240,255,244,255,199,239,196,69,109,185,247,100,173,235,87,141,224,255,0,83,174,255,165,194,202,41,71,
254,255,253,251,253,251,255,252,255,255,244,254,94,11,96,86,2,87,110,0,119,107,0,116,2,31,175,184,214,255,100,35,149,241,176,255,169,111,54,255,201,144,130,232,142,175,255,187,
255,255,255,255,255,255,255,255,254,255,255,255,102,0,103,101,0,102,80,10,82,80,10,82,255,198,244,194,62,108,191,254,106,162,226,78,150,232,255,0,77,169,255,170,199,201,40,69,
255,255,255,255,255,255,255,250,255,255,248,255,91,7,92,89,5,90,105,0,113,104,0,112,0,29,172,195,225,255,91,27,140,253,188,255,157,100,43,255,209,152,119,220,130,179,255,190,
255,255,255,255,255,255,254,255,253,255,255,254,103,0,104,104,0,104,76,6,79,80,10,82,255,205,250,174,44,89,211,255,126,143,204,58,171,252,255,0,57,148,255,191,220,191,32,60,
199,254,200,198,254,199,201,253,201,200,252,200,253,255,253,252,255,253,255,251,255,255,250,255,194,5,194,194,4,193,202,0,201,202,0,201,200,1,200,199,0,199,201,0,199,201,0,200,
199,255,199,198,254,198,201,253,201,200,252,200,253,255,253,252,255,252,255,251,255,255,250,255,193,3,193,193,3,193,200,0,200,200,0,200,198,0,198,199,0,198,200,0,199,200,0,200,
199,254,200,199,254,199,201,253,201,200,252,200,254,255,253,253,255,252,255,251,255,255,250,255,194,3,193,193,3,193,200,0,200,200,0,199,199,0,198,199,0,198,199,0,198,200,0,198,
199,254,199,198,254,199,201,253,201,200,252,200,253,255,253,252,255,252,255,251,255,255,250,255,189,0,189,191,0,190,197,0,197,197,0,197,195,0,195,195,0,195,197,0,196,195,0,194,
199,254,200,198,254,199,200,254,201,199,253,200,254,255,254,253,255,253,255,255,255,255,254,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
199,254,199,198,254,198,200,253,201,200,252,200,254,255,254,253,255,253,255,255,255,255,254,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,253,253,253,255,255,255,255,255,255,
199,254,200,199,253,199,200,253,201,200,252,200,254,255,254,253,255,253,255,255,255,255,254,254,255,255,255,254,254,254,255,255,255,254,253,254,255,255,255,255,255,255,255,255,254,253,254,253,
199,254,199,199,254,199,200,253,201,199,252,200,254,255,254,254,255,253,255,255,255,255,254,254,254,254,254,255,255,255,254,254,255,254,255,255,254,254,254,254,254,253,254,255,254,255,255,255 };

uint8_t jpeg_test_pattern_color_422v[] = {
0xff,0xd8,0xff,0xe0,0x00,0x10,0x4a,0x46,0x49,0x46,0x00,0x01,0x01,0x01,0x00,0x48,0x00,0x48,0x00,0x00,0xff,0xdb,0x00,0x43,0x00,0x01,0x01,0x01,0x01,0x01,0x01,0x01,
0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,
0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0xff,0xdb,0x00,0x43,0x01,0x01,0x01,
0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,
0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0xff,0xc0,
0x00,0x11,0x08,0x00,0x10,0x00,0x10,0x03,0x01,0x12,0x00,0x02,0x11,0x01,0x03,0x11,0x01,0xff,0xc4,0x00,0x16,0x00,0x01,0x01,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x0a,0x06,0x08,0xff,0xc4,0x00,0x31,0x10,0x00,0x00,0x03,0x05,0x04,0x05,0x0d,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x05,
0x07,0x02,0x03,0x06,0x08,0x11,0x04,0x14,0x15,0x16,0x00,0x09,0x18,0x21,0x31,0x0a,0x17,0x1a,0x25,0x32,0x41,0x51,0x65,0x67,0x81,0x85,0x98,0xb3,0xff,0xc4,0x00,0x16,
0x01,0x01,0x01,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x02,0x06,0xff,0xc4,0x00,0x27,0x11,0x00,0x00,0x05,0x03,0x04,0x02,0x01,
0x05,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x03,0x04,0x05,0x06,0x02,0x07,0x12,0x08,0x11,0x13,0x14,0x15,0x16,0x23,0x21,0x26,0x33,0x34,0x54,0xff,0xda,0x00,
0x0c,0x03,0x01,0x00,0x02,0x11,0x03,0x11,0x00,0x3f,0x00,0xdf,0x8a,0xaa,0xaa,0x1c,0x98,0xc0,0x20,0x00,0x20,0x19,0xda,0x66,0x76,0x84,0xd7,0x89,0xae,0xcd,0xfc,0xd9,
0x8c,0xb7,0xe1,0xbe,0x5a,0xbd,0x35,0x19,0x8c,0x66,0xd2,0xf5,0x5e,0x30,0xbe,0x5e,0xcb,0x14,0xeb,0x9c,0x66,0xa5,0xca,0x71,0x2c,0xed,0x1e,0xfc,0x5f,0xe8,0x63,0xa6,
0x26,0xca,0x22,0xb6,0xb1,0x4f,0x67,0xe8,0xdb,0xdc,0x85,0x78,0xb2,0x81,0xa2,0x32,0x97,0xbf,0xa7,0x50,0x1d,0xb0,0xfc,0xb5,0x9d,0xfd,0x55,0x6d,0x8e,0x3b,0x62,0x00,
0x39,0x06,0xc0,0x15,0x6d,0xae,0x53,0x0b,0xdf,0x9b,0xf6,0x98,0x4f,0x9e,0xeb,0x0b,0x77,0x47,0xee,0x15,0x6d,0xbd,0x5e,0x61,0x70,0x05,0x3f,0xa2,0x90,0xbe,0x7e,0x7e,
0x22,0x07,0xe5,0xdf,0x8c,0x4a,0x0c,0x36,0xce,0xbd,0xcb,0x94,0x08,0xee,0xd7,0x08,0x94,0xc2,0x6f,0xd9,0x76,0xdc,0x16,0xc5,0x84,0xde,0x3c,0x2e,0x07,0xd7,0x76,0xd3,
0x3c,0x34,0x21,0x39,0x7e,0x23,0xb3,0xbd,0x2b,0x0b,0x50,0x13,0xc9,0x48,0x12,0x64,0x87,0x28,0x5d,0xdc,0x48,0x71,0x44,0xd0,0x53,0x00,0x41,0xee,0x2d,0x25,0xb2,0x6c,
0x12,0x96,0x10,0xc6,0xa7,0xbb,0x8e,0x8c,0x7b,0x5c,0x36,0xdd,0x1f,0xad,0xc3,0xdd,0x5f,0x5f,0x37,0xfb,0x54,0x77,0xf8,0x0d,0x74,0x67,0x4f,0xa2,0x16,0x3e,0xe1,0xae,
0x9b,0x38,0x3b,0x6a,0x18,0x49,0x3e,0x51,0x19,0x54,0xc6,0xdd,0x95,0xb2,0x99,0xbc,0x54,0xcc,0xad,0x66,0xa4,0xdc,0xb5,0x0e,0x6b,0x88,0xa8,0x79,0x5a,0x6a,0x8a,0xbe,
0x67,0x1a,0xe2,0xfb,0x36,0x54,0xd8,0xb4,0xc3,0x0b,0x19,0x11,0xab,0x2a,0x38,0xda,0xdb,0x41,0x7e,0x55,0xbb,0xd3,0x05,0x12,0x46,0xe7,0x33,0x35,0x47,0xc8,0xc6,0x92,
0x49,0xa5,0xa9,0x3a,0x96,0x5a,0xac,0x9c,0xba,0xb1,0x56,0xbb,0x4d,0x89,0xdd,0x8a,0xac,0xb1,0x20,0xd3,0xab,0x8f,0xd5,0xee,0x26,0x3a,0x09,0x85,0x2e,0x54,0xd0,0xa1,
0xc2,0x3f,0xc2,0x22,0x61,0x8f,0x46,0x9a,0x26,0x51,0xff,0xd9 };

uint8_t jpeg_test_pattern_color_422v_expect[] = {
99,97,0,95,96,0,99,99,0,98,101,0,255,253,254,254,255,254,253,254,253,254,255,255,9,12,181,255,224,214,21,22,188,194,255,194,199,38,37,229,228,255,57,220,57,255,223,225,
97,95,0,96,96,0,99,99,0,100,102,1,254,252,252,255,255,254,253,255,253,254,255,255,223,226,255,147,72,61,202,203,255,116,195,116,255,173,172,48,47,128,133,255,132,144,61,63,
98,98,4,98,100,2,96,98,3,96,99,1,255,251,255,255,253,255,255,253,255,255,253,255,22,27,122,255,189,179,45,45,143,142,255,144,167,73,74,202,201,255,108,197,105,255,193,194,
98,99,4,101,102,5,96,98,3,104,107,8,254,247,252,255,253,255,255,252,255,255,252,255,227,232,255,193,64,54,200,200,255,91,221,93,255,180,181,50,48,189,164,253,161,194,46,47,
255,255,250,253,253,248,255,255,251,249,249,244,102,5,105,95,1,93,99,2,100,97,2,96,18,24,157,255,196,184,48,49,183,152,249,152,198,70,69,198,199,255,84,215,83,255,203,204,
255,255,250,255,255,250,255,255,250,255,255,250,96,0,98,94,0,93,97,1,99,96,1,95,223,229,255,163,71,60,202,203,255,108,204,107,255,180,179,48,49,153,145,255,144,166,56,57,
252,255,253,251,255,254,251,255,253,252,255,251,98,3,100,97,1,95,95,1,93,95,0,93,29,21,121,255,189,188,51,42,139,141,255,143,164,72,80,208,199,255,112,189,110,255,190,202,
253,255,253,252,255,254,251,255,253,254,255,253,96,2,98,97,0,95,94,0,92,96,2,94,242,235,255,188,41,40,233,224,255,76,210,78,255,209,217,31,22,178,197,255,195,192,33,45,
201,253,201,198,253,200,201,253,200,199,252,199,255,252,255,255,252,255,255,252,255,255,253,255,196,5,186,211,0,188,197,5,187,182,12,183,191,7,198,193,0,214,201,0,201,211,0,187,
201,253,201,198,253,200,201,253,200,199,252,199,255,252,255,255,252,255,255,252,255,255,253,255,195,3,184,210,0,187,195,4,186,181,11,182,188,5,196,193,0,213,199,0,199,210,0,186,
200,254,200,196,254,199,199,255,198,196,254,199,253,254,252,254,255,253,253,254,252,254,255,254,194,2,196,190,4,196,194,2,195,199,0,197,198,1,194,195,3,189,193,3,191,190,4,195,
200,254,200,196,254,199,199,255,198,196,254,199,253,254,252,254,255,253,253,254,252,254,255,254,194,2,196,190,4,196,194,2,196,198,0,196,198,1,193,195,2,188,193,3,192,190,4,194,
200,254,200,197,254,198,199,255,198,197,253,199,254,253,254,255,254,254,253,253,254,254,255,255,255,250,255,255,249,255,255,250,255,255,251,255,255,250,255,255,250,255,255,249,255,255,249,255,
200,254,200,197,254,198,199,255,198,197,253,199,254,253,254,255,254,254,253,253,254,254,255,255,255,251,255,255,250,255,255,251,255,255,252,255,255,252,255,255,249,255,255,251,255,255,251,255,
199,254,200,197,254,198,199,255,198,197,253,199,254,253,254,255,254,255,253,254,253,255,255,254,254,255,255,252,254,253,254,254,254,252,253,251,254,254,254,253,255,254,253,255,254,252,254,253,
199,254,200,197,254,198,199,255,198,197,253,199,254,253,254,255,254,255,253,254,253,255,255,254,254,255,254,253,255,254,254,254,254,254,255,253,253,254,254,252,255,253,253,255,254,253,255,254 
};

uint8_t jpeg_test_pattern_color_444[] = {
0xff,0xd8,0xff,0xe0,0x00,0x10,0x4a,0x46,0x49,0x46,0x00,0x01,0x01,0x01,0x00,0x48,0x00,0x48,0x00,0x00,0xff,0xdb,0x00,0x43,0x00,0x01,0x01,0x01,0x01,0x01,0x01,0x01,
0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,
0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0xff,0xdb,0x00,0x43,0x01,0x01,0x01,
0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,
0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0xff,0xc0,
0x00,0x11,0x08,0x00,0x10,0x00,0x10,0x03,0x01,0x11,0x00,0x02,0x11,0x01,0x03,0x11,0x01,0xff,0xc4,0x00,0x16,0x00,0x01,0x01,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x0a,0x06,0x09,0xff,0xc4,0x00,0x32,0x10,0x00,0x00,0x02,0x06,0x06,0x06,0x0b,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x15,0x16,
0x01,0x06,0x07,0x14,0x17,0x18,0x00,0x03,0x05,0x08,0x11,0x45,0x04,0x09,0x12,0x1a,0x21,0x31,0x13,0x24,0x26,0x41,0x65,0x66,0x68,0x71,0x85,0x98,0xc5,0xff,0xc4,0x00,
0x17,0x01,0x00,0x03,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x06,0x07,0x09,0x08,0xff,0xc4,0x00,0x39,0x11,0x00,0x00,0x02,0x05,0x05,
0x09,0x11,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x14,0x15,0x04,0x06,0x13,0x16,0x17,0x00,0x05,0x07,0x08,0x12,0x02,0x03,0x09,0x11,0x18,0x19,0x45,0x67,0x85,
0x22,0x25,0x26,0x42,0x43,0x44,0x46,0x62,0x63,0x64,0x66,0xa6,0xa7,0xc4,0xc5,0xe6,0xe7,0xff,0xda,0x00,0x0c,0x03,0x01,0x00,0x02,0x11,0x03,0x11,0x00,0x3f,0x00,0xd0,
0x06,0xae,0xd6,0x37,0x60,0x00,0x3b,0x3f,0x3b,0x93,0xb8,0x2b,0x9b,0x4b,0x84,0x31,0x97,0x00,0xdf,0x0c,0x6f,0x87,0x73,0xbc,0x7d,0xf2,0xd1,0x74,0xb5,0x9c,0x8c,0xf5,
0x11,0xda,0xb3,0xd5,0x9c,0x89,0xf8,0xe1,0xb8,0xa1,0x4e,0xd7,0x46,0x98,0xd8,0x60,0xf1,0x78,0x86,0xfb,0x6e,0xdb,0x5e,0xad,0x9c,0x5c,0x6c,0x72,0x72,0x28,0x0a,0x0c,
0x54,0x38,0xdf,0x72,0x22,0x20,0x1c,0xc0,0xcc,0x51,0x90,0xee,0xfb,0x37,0xb0,0x60,0x03,0xb5,0x68,0xd7,0x93,0xb1,0xba,0xb0,0x67,0x95,0x65,0x05,0x6d,0x4f,0xaf,0xe8,
0x89,0x2e,0x36,0xc3,0x4f,0xb3,0x5e,0x1d,0xe1,0x88,0x79,0x4e,0xec,0xca,0xfe,0x8e,0x12,0xf8,0x0f,0x71,0x60,0x62,0x3c,0x0b,0x76,0x2f,0x18,0x54,0x48,0x61,0x02,0xdc,
0x20,0xed,0xce,0x65,0x44,0xa5,0xaa,0x8d,0x99,0x58,0x94,0xf7,0xb9,0x64,0xa7,0x44,0xe3,0x37,0xd5,0xdc,0xa2,0xa4,0xf9,0xdc,0xc0,0xf2,0x26,0xba,0xa2,0xb0,0xa6,0x2d,
0x09,0x67,0x87,0x11,0x56,0xbc,0xf0,0xf8,0x63,0x51,0xaf,0x54,0x40,0xab,0x31,0x8b,0x53,0x68,0xfc,0xb5,0xb7,0x88,0x49,0xc1,0xf7,0x48,0x42,0x29,0x32,0x64,0x51,0x4b,
0xc4,0x99,0xd2,0x56,0x08,0x89,0xf6,0x1d,0x93,0x0d,0x36,0x6f,0x36,0xae,0xc9,0x2f,0x24,0x19,0x86,0xab,0x3b,0xc4,0x22,0xd0,0xb7,0xd7,0x37,0x75,0x28,0x0c,0xb4,0x65,
0x95,0x04,0xfc,0xd1,0xf6,0xbf,0xa6,0xc6,0x55,0x9f,0xfc,0x5f,0xea,0x51,0x1b,0x47,0xba,0x67,0x67,0xfb,0xc9,0x66,0xfa,0x2a,0xd3,0xfb,0x2f,0xe5,0x24,0x6a,0xb7,0x62,
0xfd,0x72,0xa7,0xeb,0x27,0xbf,0x1c,0x26,0x1f,0x14,0xf2,0xe4,0x8c,0x53,0xc5,0x1d,0xc9,0xda,0xa5,0x50,0xcb,0xc7,0x54,0xfe,0x7b,0xfa,0x5c,0xad,0x66,0x73,0x3d,0x47,
0xfa,0x97,0xf9,0xec,0xbf,0xff,0xd9 };

uint8_t jpeg_test_pattern_color_444_expect[] = {
99,99,0,95,96,0,99,99,0,98,101,0,255,254,255,255,255,255,255,255,255,
255,255,255,0,3,255,247,247,235,11,14,255,236,243,235,255,16,16,238,238,248,
8,255,7,253,246,253,97,95,0,96,97,0,99,100,0,101,104,1,254,252,255,255,255,255,
255,255,255,254,255,255,242,247,243,255,26,19,221,219,232,33,255,33,227,220,214,
33,30,255,233,227,229,255,15,11,99,99,0,99,100,0,97,98,0,96,99,0,255,254,255,
255,255,255,255,255,255,255,255,255,9,9,255,228,228,216,30,33,255,213,223,214,
255,36,44,212,217,239,25,255,23,250,233,239,100,101,0,101,104,1,98,99,0,
103,109,3,251,249,250,255,255,255,254,254,252,254,255,253,238,246,231,
255,38,27,212,209,228,44,255,46,219,206,197,47,38,255,223,213,221,255,19,21,
255,255,255,253,253,253,255,255,255,249,249,249,104,3,109,97,0,97,101,0,104,
98,0,99,10,10,255,223,223,213,37,40,255,203,213,204,255,45,55,204,212,235,
28,255,26,251,230,235,255,255,255,254,255,255,254,255,255,255,255,253,
98,0,98,98,0,96,100,0,100,99,0,98,240,246,236,255,32,24,219,216,233,
37,255,37,227,216,210,39,32,255,228,219,224,255,17,18,255,255,255,254,255,255,
254,255,255,254,254,252,101,0,104,100,0,98,97,0,97,95,0,94,7,7,255,233,235,222,
28,31,255,215,225,217,255,34,38,217,220,239,19,255,18,249,236,246,255,255,255,
254,255,255,254,255,255,255,255,253,98,0,99,100,0,98,96,0,94,99,0,98,250,251,253,
255,12,4,239,238,246,12,255,15,242,238,235,13,13,255,245,244,240,255,5,3,
200,255,200,197,254,199,200,255,198,197,254,199,255,254,255,255,255,255,
255,254,255,255,255,255,201,0,200,201,0,200,201,0,200,201,0,200,202,1,201,
201,0,200,201,0,200,201,0,200,200,255,200,197,254,199,200,255,198,197,254,199,
255,254,255,255,255,255,255,254,255,255,255,255,200,0,199,200,0,199,200,0,199,
200,0,199,200,0,199,200,0,199,200,0,199,200,0,199,200,255,200,197,254,199,
200,255,198,197,254,199,255,254,255,255,255,255,255,254,255,255,255,255,
200,0,199,200,0,199,200,0,199,200,0,199,200,0,199,200,0,199,200,0,199,
200,0,199,200,255,200,197,254,199,200,255,198,197,254,199,255,254,255,
255,255,255,255,254,255,255,255,255,199,0,198,200,0,199,200,0,199,200,0,199,
200,0,199,200,0,199,200,0,199,199,0,198,200,255,200,197,254,199,200,255,198,
197,254,199,255,254,255,255,255,255,255,254,255,255,255,255,
252,255,251,252,255,251,252,255,251,252,255,251,252,255,251,252,255,251,252,255,251,252,255,251,
200,255,200,197,254,199,200,255,198,197,254,199,255,254,255,255,255,255,255,254,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,254,254,254,255,255,255,255,255,255,
200,255,200,197,254,199,200,255,198,197,254,199,255,254,255,255,255,255,255,254,255,255,255,255,
255,255,255,254,254,254,255,255,255,254,254,254,255,255,255,255,255,255,255,255,255,254,254,254,
200,255,200,197,254,199,200,255,198,197,254,199,255,254,255,255,255,255,255,254,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,254,254,254,254,254,254,255,255,255,255,255,255
};

TEST_CASE("Bitsteram read test", "[sample]")
{
    uint8_t buffer[9] = { 0xfa, 0xab, 0x32, 0xb3, 0xf8, 0xc3, 0xaa, 0xaa, 0xbb };
    mameJpeg_memory_callback_param param = { buffer, 0, sizeof( buffer ) / sizeof( uint8_t ) };
    mameBitstream_context bitstream[1];
    mameBitstream_input_initialize( bitstream, mameJpeg_input_from_memory_callback, &param  );

    uint8_t data8 = 0;
    CHECK( mameBitstream_readBits(bitstream, &data8, 1, 1 ) );
    CHECK( data8 == 0x01 );
    CHECK( mameBitstream_readBits(bitstream, &data8, 1, 1 ) );
    CHECK( data8 == 0x01 );
    CHECK( mameBitstream_readBits(bitstream, &data8, 1, 1 ) );
    CHECK( data8 == 0x01 );
    CHECK( mameBitstream_readBits(bitstream, &data8, 1, 1 ) );
    CHECK( data8 == 0x01 );

    CHECK( mameBitstream_readBits(bitstream, &data8, 1, 3 ) );
    CHECK( data8 == 0x05 );
    CHECK( mameBitstream_readBits(bitstream, &data8, 1, 3 ) );
    CHECK( data8 == 0x02 );
  
    CHECK( mameBitstream_readBits(bitstream, &data8, 1, 8 ) );
    CHECK( data8 == 0xac );

    uint16_t data16 = 0;
    CHECK( mameBitstream_readBits(bitstream, &data16, 2, 12 ) );
    CHECK( data16 == 0xcac );
 
    uint32_t data32 = 0;
    CHECK( mameBitstream_readBits(bitstream, &data32, 4, 18 ) );
    CHECK(data32 == 0x3f8c3 );

    CHECK( mameBitstream_readBits(bitstream, &data8, 1, 8 ) );
    CHECK( data8 == 0xaa );

    CHECK( mameBitstream_readBits(bitstream, &data16, 2, 16 ) );
    CHECK( data16 == 0xaabb );

}

TEST_CASE("Bitsteram write test", "[sample]")
{
    uint8_t buffer[9];
    mameBitstream_context bitstream[1];
    mameJpeg_memory_callback_param param = { buffer, 0, sizeof( buffer ) / sizeof( uint8_t ) };
    mameBitstream_output_initialize( bitstream, mameJpeg_output_to_memory_callback, &param  );

    uint8_t data8 = 0x01;
    CHECK( mameBitstream_writeBits(bitstream, &data8, 1 ) );
    data8 = 0x01;
    CHECK( mameBitstream_writeBits(bitstream, &data8, 1 ) );
    data8 = 0x01;
    CHECK( mameBitstream_writeBits(bitstream, &data8, 1 ) );
    data8 = 0x01;
    CHECK( mameBitstream_writeBits(bitstream, &data8, 1 ) );

    data8 = 0x05;
    CHECK( mameBitstream_writeBits(bitstream, &data8, 3 ) );
    data8 = 0x02;
    CHECK( mameBitstream_writeBits(bitstream, &data8, 3 ) );
  
    data8 = 0xac;
    CHECK( mameBitstream_writeBits(bitstream, &data8, 8 ) );

    uint16_t data16 = 0xcac;
    CHECK( mameBitstream_writeBits(bitstream, &data16, 12 ) );
 
    uint32_t data32 = 0x3f8c3;
    CHECK( mameBitstream_writeBits(bitstream, &data32, 18 ) );

    data8 = 0xaa;
    CHECK( mameBitstream_writeBits(bitstream, &data8, 8 ) );
    data16 = 0xaabb;
    CHECK( mameBitstream_writeBits(bitstream, &data16, 16 ) );
    
    int res = memcmp( buffer, "\xfa\xab\x32\xb3\xf8\xc3\xaa\xaa\xbb", sizeof( buffer ) / sizeof( uint8_t ) );
    CHECK( res == 0 );
}

TEST_CASE("Get image info", "[getImageInfo]")
{
    uint16_t width;
    uint16_t height;
    uint8_t components;
    mameJpeg_memory_callback_param input_param = {
        .buffer_ptr = (void*)jpeg_test_pattern_binary,
        .buffer_pos = 0,
        .buffer_size = sizeof( jpeg_test_pattern_binary) / sizeof( uint8_t )
    };
    mameJpeg_getImageInfo( mameJpeg_input_from_memory_callback,
                           &input_param,
                           &width,
                           &height,
                           &components );

    CHECK( width == 16 );
    CHECK( height == 16 );
    CHECK( components == 1 );
}

TEST_CASE("Decode binary jpeg", "[sample]")
{
    struct {
        uint8_t* data;
        uint8_t* expect;
        size_t size;
    } datas[] = {
        { jpeg_test_pattern_binary, jpeg_test_pattern_binary_expect, sizeof( jpeg_test_pattern_binary ) },
        { jpeg_test_pattern_grayscale, jpeg_test_pattern_grayscale_expect, sizeof( jpeg_test_pattern_grayscale ) },
        { jpeg_test_pattern_color_444, jpeg_test_pattern_color_444_expect,  sizeof( jpeg_test_pattern_color_444 ) },
        { jpeg_test_pattern_color_422v, jpeg_test_pattern_color_422v_expect, sizeof( jpeg_test_pattern_color_422v ) },
        { jpeg_test_pattern_color_422h, jpeg_test_pattern_color_422h_expect, sizeof( jpeg_test_pattern_color_422h ) },
        { jpeg_test_pattern_color_420, jpeg_test_pattern_color_420_expect, sizeof( jpeg_test_pattern_color_420 ) },
    };

    for( int i = 0; i < sizeof( datas ) / sizeof( datas[0] ); i++ )
    {
        uint16_t width;
        uint16_t height;
        uint8_t components;
        size_t work_buffer_size;
        mameJpeg_memory_callback_param info_input_param = {
            .buffer_ptr = (void*)datas[i].data,
            .buffer_pos = 0,
            .buffer_size = datas[i].size
        };
        mameJpeg_getDecodeBufferSize( mameJpeg_input_from_memory_callback,
                                      &info_input_param,
                                      &width,
                                      &height,
                                      &components,
                                      &work_buffer_size );

        mameJpeg_memory_callback_param input_param = {
            .buffer_ptr = (void*)datas[i].data,
            .buffer_pos = 0,
            .buffer_size = datas[i].size
        };

        uint8_t work_buffer[ work_buffer_size ];
        memset( work_buffer, 0x00, work_buffer_size );

        size_t decode_image_buffer_size = components * width * height;
        uint8_t decode_image_buffer[ decode_image_buffer_size ];
        mameJpeg_memory_callback_param output_param = {
            .buffer_ptr = decode_image_buffer,
            .buffer_pos = 0,
            .buffer_size = decode_image_buffer_size
        };

        mameJpeg_context context[1];
        mameJpeg_initializeDecode( context,
                                   mameJpeg_input_from_memory_callback,
                                   &input_param,
                                   mameJpeg_output_to_memory_callback,
                                   &output_param,
                                   work_buffer,
                                   work_buffer_size );

        mameJpeg_decode( context );

        double diff_sum = 0.0;
        int pixels = components * width * height;
        for( int j = 0; j < pixels; j++ )
        {
            uint8_t v = decode_image_buffer[ j ];
            uint8_t e = datas[i].expect[ j ];
            int diff = (int)v - (int)e;
            diff_sum += abs( diff );
        }
        diff_sum /= pixels;
        CHECK( diff_sum < 1.0 );
    }
}

TEST_CASE("Encode jpeg", "[sample]")
{
    struct {
        uint8_t* data;
        uint8_t* expect;
        size_t size;
        mameJpeg_format format;
    } datas[] = {
        { jpeg_test_pattern_binary_expect, jpeg_test_pattern_binary_expect,  sizeof( jpeg_test_pattern_binary_expect ), MAMEJPEG_FORMAT_Y_444 },
        { jpeg_test_pattern_grayscale_expect, jpeg_test_pattern_grayscale_expect, sizeof( jpeg_test_pattern_grayscale_expect ), MAMEJPEG_FORMAT_Y_444 },
        { jpeg_test_pattern_color_444_expect, jpeg_test_pattern_color_444_expect, sizeof( jpeg_test_pattern_color_444_expect ), MAMEJPEG_FORMAT_YCBCR_444 },
        { jpeg_test_pattern_color_444_expect, jpeg_test_pattern_color_422v_expect, sizeof( jpeg_test_pattern_color_444_expect ), MAMEJPEG_FORMAT_YCBCR_422v },
        { jpeg_test_pattern_color_444_expect, jpeg_test_pattern_color_422h_expect, sizeof( jpeg_test_pattern_color_444_expect ), MAMEJPEG_FORMAT_YCBCR_422h },
        { jpeg_test_pattern_color_444_expect, jpeg_test_pattern_color_420_expect, sizeof( jpeg_test_pattern_color_444_expect ), MAMEJPEG_FORMAT_YCBCR_420 },
    };

    for( int i = 0; i < sizeof( datas ) / sizeof( datas[0] ); i++ )
    {
        uint16_t width = 16;
        uint16_t height = 16;
        mameJpeg_format format = datas[i].format;
        uint8_t components = mameJpeg_getComponentNum( format );

        size_t encode_image_buffer_size = 1024 * 1024;
        uint8_t encode_image_buffer[ encode_image_buffer_size ];

        {
            mameJpeg_memory_callback_param input_param = {
                .buffer_ptr = (void*)datas[i].data,
                .buffer_pos = 0,
                .buffer_size = datas[i].size
            };

            mameJpeg_memory_callback_param output_param = {
                encode_image_buffer,
                0,
                encode_image_buffer_size
            };

            size_t work_buffer_size;
            mameJpeg_getEncodeBufferSize( width, height, format, &work_buffer_size );

            uint8_t work_buffer[ work_buffer_size ];
            memset( work_buffer, 0x00, work_buffer_size );

            mameJpeg_context context[1];
            mameJpeg_initializeEncode( context,
                    mameJpeg_input_from_memory_callback,
                    &input_param,
                    mameJpeg_output_to_memory_callback,
                    &output_param,
                    width,
                    height,
                    format,
                    work_buffer,
                    work_buffer_size);

            mameJpeg_encode( context );

            FILE* fff = fopen( "./test2.jpg", "w" );
            fwrite( encode_image_buffer, encode_image_buffer_size, 1, fff );
            fclose( fff );
        }

        {
            size_t work_buffer_size;
            mameJpeg_memory_callback_param info_input_param = {
                .buffer_ptr = (void*)encode_image_buffer,
                .buffer_pos = 0,
                .buffer_size = encode_image_buffer_size
            };
            mameJpeg_getDecodeBufferSize( mameJpeg_input_from_memory_callback,
                    &info_input_param,
                    NULL,
                    NULL,
                    NULL,
                    &work_buffer_size );
            uint8_t work_buffer[ work_buffer_size ];
            memset( work_buffer, 0x00, work_buffer_size );

            mameJpeg_memory_callback_param input_param = {
                .buffer_ptr = (void*)encode_image_buffer,
                .buffer_pos = 0,
                .buffer_size = encode_image_buffer_size
            };

            size_t decode_image_buffer_size = components * width * height;
            uint8_t decode_image_buffer[ decode_image_buffer_size ];
            mameJpeg_memory_callback_param output_param = {
                .buffer_ptr = (void*)decode_image_buffer,
                .buffer_pos = 0,
                .buffer_size = decode_image_buffer_size
            };

            mameJpeg_context context[1];
            mameJpeg_initializeDecode( context,
                    mameJpeg_input_from_memory_callback,
                    &input_param,
                    mameJpeg_output_to_memory_callback,
                    &output_param,
                    work_buffer,
                    work_buffer_size );

            mameJpeg_decode( context );

            double diff_sum = 0.0;
            int pixels = components * width * height;
            for( int j = 0; j < pixels; j++ )
            {
                uint8_t v = decode_image_buffer[ j ];
                uint8_t e = datas[i].expect[ j ];
                int diff = (int)v - (int)e;
                diff_sum += abs( diff );
            }
            diff_sum /= pixels;
            CHECK( diff_sum < 30.0 );
        }
    }
}
