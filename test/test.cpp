#include <cstdlib>

#define CATCH_CONFIG_MAIN
#include "catch.hpp"

#include "../mameJpeg.h"

const uint8_t jpeg_blob[] = {
0xff,0xd8,0xff,0xe0,0x00,0x10,0x4a,0x46,0x49,0x46,0x00,0x01,0x01,0x01,0x00,0x48,
0x00,0x48,0x00,0x00,0xff,0xfe,0x00,0x13,0x43,0x72,0x65,0x61,0x74,0x65,0x64,0x20,
0x77,0x69,0x74,0x68,0x20,0x47,0x49,0x4d,0x50,0xff,0xdb,0x00,0x43,0x00,0x01,0x01,
0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,
0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,
0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,
0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0xff,0xdb,
0x00,0x43,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,
0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,
0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,
0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,
0x01,0x01,0x01,0xff,0xc0,0x00,0x11,0x08,0x00,0x10,0x00,0x10,0x03,0x01,0x11,0x00,
0x02,0x11,0x01,0x03,0x11,0x01,0xff,0xc4,0x00,0x15,0x00,0x01,0x01,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0a,0x0b,0xff,0xc4,0x00,
0x14,0x10,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0xff,0xc4,0x00,0x14,0x01,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xc4,0x00,0x14,0x11,0x01,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,
0xda,0x00,0x0c,0x03,0x01,0x00,0x02,0x11,0x03,0x11,0x00,0x3f,0x00,0x9f,0xf8,0x10,
0x00,0x1f,0xc0,0x10,0x00,0x3f,0xff,0xd9 };

TEST_CASE("Bitsteram read test", "[sample]")
{
    uint8_t buffer[9] = { 0xfa, 0xab, 0x32, 0xb3, 0xf8, 0xc3, 0xaa, 0xaa, 0xbb };
    mameJpeg_memory_callback_param param = { buffer, 0, sizeof( buffer ) / sizeof( uint8_t ) };
    mameBitstream_context bitstream[1];
    mameBitstream_input_initialize( bitstream, mameJpeg_input_from_memory_callback, mameJpeg_rewind_memory_callback, &param  );

    uint8_t data8 = 0;
    CHECK( mameBitstream_readBits(bitstream, &data8, 1, 1 ) );
    CHECK( data8 == 0x01 );
    CHECK( mameBitstream_readBits(bitstream, &data8, 1, 1 ) );
    CHECK( data8 == 0x01 );
    CHECK( mameBitstream_readBits(bitstream, &data8, 1, 1 ) );
    CHECK( data8 == 0x01 );
    CHECK( mameBitstream_readBits(bitstream, &data8, 1, 1 ) );
    CHECK( data8 == 0x01 );

    CHECK( mameBitstream_readBits(bitstream, &data8, 1, 3 ) );
    CHECK( data8 == 0x05 );
    CHECK( mameBitstream_readBits(bitstream, &data8, 1, 3 ) );
    CHECK( data8 == 0x02 );
  
    CHECK( mameBitstream_readBits(bitstream, &data8, 1, 8 ) );
    CHECK( data8 == 0xac );

    uint16_t data16 = 0;
    CHECK( mameBitstream_readBits(bitstream, &data16, 2, 12 ) );
    CHECK( data16 == 0xcac );
 
    uint32_t data32 = 0;
    CHECK( mameBitstream_readBits(bitstream, &data32, 4, 18 ) );
    CHECK(data32 == 0x3f8c3 );

    CHECK( mameBitstream_readBits(bitstream, &data8, 1, 8 ) );
    CHECK( data8 == 0xaa );

    CHECK( mameBitstream_readBits(bitstream, &data16, 2, 16 ) );
    CHECK( data16 == 0xaabb );

}

TEST_CASE("Bitsteram write test", "[sample]")
{
    uint8_t buffer[9];
    mameBitstream_context bitstream[1];
    mameJpeg_memory_callback_param param = { buffer, 0, sizeof( buffer ) / sizeof( uint8_t ) };
    mameBitstream_output_initialize( bitstream, mameJpeg_output_to_memory_callback, mameJpeg_rewind_memory_callback, &param  );

    uint8_t data8 = 0x01;
    CHECK( mameBitstream_writeBits(bitstream, &data8, 1 ) );
    data8 = 0x01;
    CHECK( mameBitstream_writeBits(bitstream, &data8, 1 ) );
    data8 = 0x01;
    CHECK( mameBitstream_writeBits(bitstream, &data8, 1 ) );
    data8 = 0x01;
    CHECK( mameBitstream_writeBits(bitstream, &data8, 1 ) );

    data8 = 0x05;
    CHECK( mameBitstream_writeBits(bitstream, &data8, 3 ) );
    data8 = 0x02;
    CHECK( mameBitstream_writeBits(bitstream, &data8, 3 ) );
  
    data8 = 0xac;
    CHECK( mameBitstream_writeBits(bitstream, &data8, 8 ) );

    uint16_t data16 = 0xcac;
    CHECK( mameBitstream_writeBits(bitstream, &data16, 12 ) );
 
    uint32_t data32 = 0x3f8c3;
    CHECK( mameBitstream_writeBits(bitstream, &data32, 18 ) );

    data8 = 0xaa;
    CHECK( mameBitstream_writeBits(bitstream, &data8, 8 ) );
    data16 = 0xaabb;
    CHECK( mameBitstream_writeBits(bitstream, &data16, 16 ) );
    
    int res = memcmp( buffer, "\xfa\xab\x32\xb3\xf8\xc3\xaa\xaa\xbb", sizeof( buffer ) / sizeof( uint8_t ) );
    CHECK( res == 0 );
}

TEST_CASE("Decode jpeg", "[sample]")
{
    uint8_t output_buffer[1024 * 1024];
    uint8_t work_buffer[1024 * 1024];
    mameJpeg_context context[1];
    mameJpeg_memory_callback_param input_param = { (void*)jpeg_blob, 0, sizeof( jpeg_blob ) / sizeof( uint8_t ) };
    mameJpeg_memory_callback_param output_param = { output_buffer, 0, sizeof( output_buffer ) / sizeof( uint8_t ) };
    mameJpeg_initialize( context,
                         mameJpeg_input_from_memory_callback,
                         mameJpeg_rewind_memory_callback,
                         &input_param,
                         mameJpeg_output_to_memory_callback,
                         mameJpeg_rewind_memory_callback,
                         &output_param,
                         MAMEJPEG_FORMAT_Y,
                         MAMEJPEG_DECODE );

    mameJpeg_setWorkBuffer( context, work_buffer, 1024 * 1024 );
    mameJpeg_decode( context );

    for( int y = 0; y < 16; y++ )
    {
        for( int x = 0; x < 16; x++ )
        {
            printf("%4d ", output_buffer[ 16 * y + x ] );
        }
        printf("\n");
    }

    //mameJpeg_dumpHeader( context );
}
