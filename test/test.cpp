#include <cstdlib>

#define CATCH_CONFIG_MAIN
#include "catch.hpp"

#include "../mameJpeg.h"
#include "../../mameBitmap/mameBitmap.h"

uint8_t jpeg_test_pattern_binary[] = {
0xff,0xd8,0xff,0xe0,0x00,0x10,0x4a,0x46,0x49,0x46,0x00,0x01,0x01,0x01,0x00,0x48,0x00,0x48,0x00,0x00,0xff,0xdb,0x00,0x43,0x00,0x03,0x02,0x02,0x03,0x02,0x02,0x03,
0x03,0x03,0x03,0x04,0x03,0x03,0x04,0x05,0x08,0x05,0x05,0x04,0x04,0x05,0x0a,0x07,0x07,0x06,0x08,0x0c,0x0a,0x0c,0x0c,0x0b,0x0a,0x0b,0x0b,0x0d,0x0e,0x12,0x10,0x0d,
0x0e,0x11,0x0e,0x0b,0x0b,0x10,0x16,0x10,0x11,0x13,0x14,0x15,0x15,0x15,0x0c,0x0f,0x17,0x18,0x16,0x14,0x18,0x12,0x14,0x15,0x14,0xff,0xc0,0x00,0x0b,0x08,0x00,0x10,
0x00,0x10,0x01,0x01,0x11,0x00,0xff,0xc4,0x00,0x15,0x00,0x01,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0xff,0xc4,0x00,
0x2b,0x10,0x00,0x00,0x03,0x02,0x0c,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x13,0x14,0x15,0x00,0x12,0x09,0x17,0x19,0x22,0x26,0x35,0x39,0x42,0x64,
0x67,0x85,0x94,0x44,0x47,0x62,0x84,0xa6,0xc4,0xe4,0xff,0xda,0x00,0x08,0x01,0x01,0x00,0x00,0x3f,0x00,0x96,0x2e,0x67,0x14,0x65,0x68,0x69,0xc9,0xfb,0x91,0x44,0x3f,
0xd0,0xe8,0x57,0x9e,0x9a,0xab,0xb0,0x45,0x7b,0x72,0xe1,0x6d,0x82,0x0c,0x86,0x14,0x24,0xfe,0x01,0x3e,0x8a,0xa0,0x31,0xe7,0x66,0x89,0xef,0xb2,0x43,0x1c,0xec,0xf1,
0x4f,0xb5,0xbf,0xff,0xd9 };

uint8_t jpeg_test_pattern_binary_expect[] = {
0,0,0,0,255,255,255,255,0,255,0,255,0,255,0,255,0,0,0,0,255,255,255,255,255,
0,255,0,255,0,255,0,0,0,0,0,255,255,255,255,0,255,0,255,0,255,0,255,0,0,0,0,255,
255,255,255,255,0,255,0,255,0,255,0,255,255,255,255,0,0,0,0,0,255,0,255,0,255,
0,255,255,255,255,255,0,0,0,0,255,0,255,0,255,0,255,0,255,255,255,255,0,0,0,0,
0,255,0,255,0,255,0,255,255,255,255,255,0,0,0,0,255,0,255,0,255,0,255,0,0,0,0,
0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,
0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,
0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,0,0,0,0,255,255,255,255,
255,255,255,255,255,255,255,255,0,0,0,0,255,255,255,255,255,255,255,255,255,
255,255,255,0,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255 };

uint8_t jpeg_test_pattern_grayscale[] = {
0xff,0xd8,0xff,0xe0,0x00,0x10,0x4a,0x46,0x49,0x46,0x00,0x01,0x01,0x01,0x00,0x48,0x00,0x48,0x00,0x00,0xff,0xdb,0x00,0x43,0x00,0x01,0x01,0x01,0x01,0x01,0x01,0x01,
0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,
0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0xff,0xc0,0x00,0x0b,0x08,0x00,0x10,
0x00,0x10,0x01,0x01,0x11,0x00,0xff,0xc4,0x00,0x16,0x00,0x01,0x01,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0a,0x06,0x08,0xff,0xc4,
0x00,0x32,0x10,0x00,0x00,0x03,0x04,0x05,0x08,0x0b,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x15,0x16,0x17,0x01,0x06,0x07,0x18,0x00,0x05,0x08,0x11,0x45,0x02,
0x04,0x09,0x13,0x14,0x1a,0x21,0x31,0x12,0x24,0x26,0x41,0x65,0x66,0x69,0x71,0x84,0x98,0xc4,0xff,0xda,0x00,0x08,0x01,0x01,0x00,0x00,0x3f,0x00,0xdd,0xd1,0xda,0x3b,
0xee,0xb8,0x95,0x7b,0x29,0x3c,0x53,0xc2,0x3d,0x8e,0xcb,0x6a,0x61,0x2d,0xa0,0x7e,0x0b,0x1f,0xcf,0x07,0x85,0xff,0x00,0xcb,0x25,0xc2,0xce,0x34,0x35,0xd4,0x2c,0x21,
0x5e,0x41,0x25,0xc7,0x71,0xeb,0x2d,0x59,0x07,0x62,0xac,0xad,0x3b,0x52,0x0a,0xea,0x52,0x50,0xf2,0x85,0x90,0xdc,0xfc,0xd0,0xbe,0x3e,0x1b,0xa3,0xc8,0x18,0x86,0x85,
0x6c,0x44,0xe5,0x4d,0xc5,0x4a,0xd0,0xa0,0xa9,0x6d,0xb1,0x6c,0xa7,0xa7,0xfa,0x27,0xd4,0xd3,0x89,0x8b,0x7c,0x0f,0xd9,0x42,0x4d,0xba,0x59,0xea,0x10,0xdf,0xa9,0xbe,
0xfc,0x6e,0x99,0xbb,0xdb,0xcb,0x93,0x2f,0x6f,0x16,0x77,0x37,0xa5,0x4f,0xff,0xd9 };

uint8_t jpeg_test_pattern_grayscale_expect[] = {
92,88,91,93,255,255,255,255,20,247,30,241,69,238,198,248,88,90,92,96,252,255,
255,255,246,78,221,222,220,49,229,67,92,92,90,92,255,255,255,255,26,227,51,220,
90,218,221,237,93,96,91,100,249,255,254,255,243,89,211,233,208,58,216,71,255,
253,255,250,31,25,29,26,27,222,57,210,100,212,226,235,255,255,255,255,24,25,26,
26,244,84,218,224,218,51,221,69,255,255,255,254,28,27,24,23,24,233,48,222,88,
220,214,240,255,255,255,255,26,27,23,27,251,64,238,203,239,31,244,58,239,239,
239,239,255,255,255,255,57,57,57,57,58,57,57,57,239,239,239,239,255,255,255,
255,56,56,56,56,56,56,56,56,239,239,239,239,255,255,255,255,56,56,56,55,55,56,
56,56,239,239,239,239,255,255,255,255,51,53,52,52,52,52,53,51,239,239,239,239,
255,255,255,255,255,255,255,255,255,255,255,255,239,239,239,239,255,255,255,
255,255,255,255,255,255,254,255,255,239,239,239,239,255,255,255,255,255,255,
255,254,255,255,255,254,239,239,239,239,255,255,255,255,255,255,255,255,254,
254,255,255 };

uint8_t jpeg_test_pattern_color_420[] = {
0xff,0xd8,0xff,0xe0,0x00,0x10,0x4a,0x46,0x49,0x46,0x00,0x01,0x01,0x01,0x00,0x48,0x00,0x48,0x00,0x00,0xff,0xdb,0x00,0x43,0x00,0x01,0x01,0x01,0x01,0x01,0x01,0x01,
0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,
0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0xff,0xdb,0x00,0x43,0x01,0x01,0x01,
0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,
0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0xff,0xc0,
0x00,0x11,0x08,0x00,0x10,0x00,0x10,0x03,0x01,0x22,0x00,0x02,0x11,0x01,0x03,0x11,0x01,0xff,0xc4,0x00,0x16,0x00,0x01,0x01,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x0a,0x07,0x08,0xff,0xc4,0x00,0x2d,0x10,0x00,0x00,0x04,0x04,0x04,0x01,0x0d,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x03,
0x04,0x05,0x02,0x06,0x07,0x08,0x00,0x11,0x12,0x15,0x16,0x09,0x0a,0x13,0x17,0x18,0x1a,0x25,0x31,0x58,0x85,0x98,0xb2,0xd7,0xff,0xc4,0x00,0x15,0x01,0x01,0x01,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x06,0x07,0xff,0xc4,0x00,0x1d,0x11,0x00,0x01,0x05,0x01,0x01,0x01,0x01,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x04,0x01,0x02,0x03,0x05,0x06,0x07,0x14,0x12,0x34,0xff,0xda,0x00,0x0c,0x03,0x01,0x00,0x02,0x11,0x03,0x11,0x00,0x3f,0x00,0xdf,0xb5,0x56,0xab,
0x43,0xcd,0x8b,0x85,0x84,0x36,0x01,0xbd,0xa0,0xbd,0xb8,0x9d,0x04,0x07,0x76,0x0b,0x6f,0xea,0xcf,0xb3,0x7e,0xdd,0x9e,0x7e,0x19,0x5e,0xe3,0x9d,0x06,0x74,0x8a,0xbd,
0x80,0xe7,0xaa,0x57,0xe1,0xee,0x17,0x10,0xc9,0xe8,0x5e,0xb5,0x36,0x57,0xe4,0x28,0xa5,0xc9,0x5e,0x55,0x91,0x0f,0xd4,0x44,0x8c,0x6a,0x37,0x5a,0x8e,0xcc,0xa0,0xe8,
0x52,0x11,0x4c,0x14,0x22,0x32,0x4b,0xb6,0xa4,0xc9,0x4b,0x64,0x30,0xc3,0x89,0xb1,0x33,0x5a,0x53,0xc9,0xab,0x28,0xb2,0x34,0xdb,0x2c,0x4b,0xe4,0x88,0x29,0x71,0x14,
0x2c,0xbe,0x82,0x8f,0xd9,0x64,0x36,0x86,0x99,0xaf,0x90,0x11,0x1f,0x52,0xaf,0x37,0xef,0x6c,0xfb,0x39,0xe0,0xd5,0x77,0x63,0x87,0xd6,0xf0,0xfc,0x6d,0x1f,0xdf,0x70,
0xcf,0x8c,0xd1,0xf2,0x2b,0x4e,0x57,0x26,0x26,0xcf,0x42,0xde,0x4b,0x59,0x14,0xe5,0x13,0x1b,0xdf,0x59,0xa7,0xde,0x36,0xfe,0x42,0xc5,0xda,0x80,0xcf,0xa0,0xa2,0x26,
0x31,0x44,0x5a,0x52,0xee,0xc6,0x39,0x24,0x35,0xd2,0xcb,0x32,0xfe,0x07,0x0c,0x4c,0x50,0x90,0x3d,0x87,0x8d,0x3b,0x90,0x74,0x6c,0xe0,0xc7,0x74,0x3d,0xb2,0x72,0x4b,
0x20,0x6c,0xab,0x0a,0x94,0xd5,0xcd,0x5e,0xef,0x13,0x68,0x0c,0x56,0xb6,0x5e,0xf0,0x94,0x4a,0xc4,0x10,0x6a,0x5f,0x00,0x61,0xd7,0x8a,0x91,0x90,0xd9,0x6b,0xed,0x3d,
0x7f,0x47,0x8a,0x53,0x04,0x6c,0x6d,0xff,0xd9 };

uint8_t jpeg_test_pattern_color_420_expect[] = {
92,101,18,98,96,0,103,98,0,96,96,32,254,255,239,255,255,255,255,250,255,
255,246,255,25,18,114,248,238,255,51,24,101,255,226,247,112,78,68,255,255,232,
143,164,123,231,255,206,96,95,3,100,100,0,103,101,0,99,99,25,254,255,237,
248,255,248,248,255,250,254,251,255,255,239,255,104,77,158,255,247,255,
163,164,146,249,255,251,23,30,40,255,255,239,99,91,26,102,96,8,101,103,0,
98,103,0,97,94,23,255,255,239,247,255,248,243,255,243,255,252,255,55,18,88,
255,235,255,67,55,43,240,255,227,75,113,116,244,252,255,180,150,162,
255,245,188,97,95,34,95,104,11,91,101,5,103,98,56,255,248,255,255,247,255,
255,249,255,255,243,255,255,232,255,129,81,141,255,249,248,161,175,149,
240,255,255,28,20,77,255,240,255,136,76,40,255,255,241,252,255,221,254,255,221,
255,244,247,76,23,77,85,9,81,87,11,83,75,13,99,59,13,111,255,237,255,
74,57,75,255,255,246,109,107,121,255,247,255,207,181,192,255,248,214,
255,250,255,252,255,253,252,255,251,255,242,255,89,4,97,113,0,106,113,0,107,
89,2,117,255,228,255,105,85,148,255,254,255,161,171,146,245,255,255,
22,29,47,255,254,241,109,89,30,255,248,255,251,255,253,249,255,250,255,241,255,
94,4,100,113,0,105,106,0,101,87,1,108,67,5,104,253,217,255,60,58,33,238,255,223,
73,113,112,240,255,255,171,152,148,255,249,184,253,254,255,240,255,234,
238,255,232,255,250,255,76,16,78,84,11,80,75,14,73,80,12,89,255,212,255,
141,47,121,255,221,235,161,153,151,233,233,255,43,8,102,255,212,255,
157,46,52,215,244,216,199,254,196,198,255,195,220,239,220,255,248,255,
255,249,255,255,252,255,255,233,255,163,29,154,191,12,166,178,21,150,
150,36,147,145,34,175,164,19,198,187,12,179,197,13,143,204,251,205,188,255,192,
189,255,191,210,245,212,251,255,251,244,255,244,244,255,244,255,235,255,
180,14,172,225,0,217,224,0,220,205,0,206,207,0,210,221,0,222,224,0,222,
214,0,213,204,251,205,189,255,192,190,255,193,210,245,212,251,255,250,
245,255,244,245,255,244,255,234,255,176,16,176,221,0,224,224,0,229,211,0,211,
214,0,204,222,0,213,217,0,217,203,0,215,207,250,205,195,255,192,194,255,193,
213,244,212,254,255,253,254,255,253,252,255,251,255,240,255,144,38,148,
173,17,176,175,17,174,163,25,164,163,25,162,170,20,169,169,21,167,161,27,160,
204,252,204,196,255,194,197,255,195,210,246,210,251,255,251,255,253,255,
255,254,255,255,250,255,255,241,255,255,234,255,255,235,255,255,238,255,
255,239,255,255,236,255,255,236,255,255,237,255,200,254,202,193,255,196,
196,255,197,206,249,206,247,255,246,255,254,255,255,254,255,252,255,250,
248,255,246,248,255,246,248,255,248,248,255,248,248,255,248,249,255,250,
249,255,250,249,255,250,200,254,202,195,255,196,196,255,197,206,249,206,
245,255,246,255,254,255,255,254,255,252,255,251,248,255,248,247,255,248,
248,255,250,248,255,250,249,255,248,249,255,248,248,255,248,247,255,250,
204,252,202,196,255,196,197,255,195,209,247,206,249,255,248,255,253,255,
255,253,255,255,255,255,255,253,255,255,250,255,255,250,255,255,252,255,
255,252,255,255,252,255,255,252,255,255,254,255 };

uint8_t jpeg_test_pattern_color_422h[] = {
0xff,0xd8,0xff,0xe0,0x00,0x10,0x4a,0x46,0x49,0x46,0x00,0x01,0x01,0x01,0x00,0x48,0x00,0x48,0x00,0x00,0xff,0xdb,0x00,0x43,0x00,0x01,0x01,0x01,0x01,0x01,0x01,0x01,
0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,
0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0xff,0xdb,0x00,0x43,0x01,0x01,0x01,
0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,
0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0xff,0xc0,
0x00,0x11,0x08,0x00,0x10,0x00,0x10,0x03,0x01,0x21,0x00,0x02,0x11,0x01,0x03,0x11,0x01,0xff,0xc4,0x00,0x16,0x00,0x01,0x01,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x0a,0x06,0x09,0xff,0xc4,0x00,0x32,0x10,0x00,0x00,0x02,0x06,0x06,0x06,0x0b,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x15,0x16,
0x01,0x06,0x07,0x14,0x17,0x18,0x00,0x03,0x05,0x08,0x11,0x45,0x04,0x09,0x12,0x1a,0x21,0x31,0x13,0x24,0x26,0x41,0x65,0x66,0x68,0x71,0x85,0x98,0xc5,0xff,0xc4,0x00,
0x16,0x01,0x01,0x01,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0x03,0x06,0xff,0xc4,0x00,0x2a,0x11,0x00,0x00,0x05,0x02,0x03,0x07,
0x05,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x05,0x06,0x14,0x15,0x16,0x07,0x13,0x04,0x08,0x17,0x03,0x11,0x12,0x18,0x26,0x43,0x65,0x22,0x23,0x45,0x46,0x63,
0x64,0xff,0xda,0x00,0x0c,0x03,0x01,0x00,0x02,0x11,0x03,0x11,0x00,0x3f,0x00,0xd0,0x06,0xae,0xd6,0x37,0x60,0x00,0x3b,0x3f,0x3b,0x93,0xb8,0x2b,0x9b,0x4b,0x84,0x31,
0x97,0x00,0xdf,0x0c,0x6f,0x87,0x73,0xbc,0x7d,0xf2,0xd1,0x74,0xb5,0x9c,0x8c,0xf5,0x1b,0x06,0x79,0x56,0x50,0x56,0xd4,0xfa,0xfe,0x88,0x92,0xe3,0x6c,0x34,0xfb,0x35,
0xe1,0xde,0x18,0x87,0x94,0xee,0xcc,0xaf,0xe8,0xe1,0x2f,0x80,0xf7,0x16,0x06,0x23,0xc0,0xb7,0x62,0xf1,0x85,0x44,0x86,0x10,0x2d,0xc2,0x0e,0xdc,0xe6,0x54,0x4a,0x5a,
0xa8,0xe8,0x5e,0xa7,0x7a,0x71,0x97,0x0c,0x09,0x6a,0x48,0xfa,0xfa,0x22,0x39,0xb7,0x69,0xb6,0x8d,0xc5,0x8c,0x0a,0xa8,0x8b,0x28,0x8a,0x4d,0x87,0x64,0x4d,0x3b,0x9c,
0xd6,0x68,0x85,0x56,0x8c,0x36,0xc8,0x24,0x34,0x5d,0xb3,0x55,0xe9,0xfa,0x66,0x2c,0xb3,0x68,0xbe,0x51,0x32,0xf1,0xab,0x9c,0x99,0x42,0x80,0xdb,0x1b,0x14,0x6f,0xe2,
0x19,0xdb,0x03,0xc7,0xb8,0xd9,0x0c,0x12,0x29,0x52,0x6b,0x30,0xd6,0x43,0xec,0xad,0x13,0x5f,0x2e,0x39,0x93,0x6c,0x8a,0x12,0x13,0x63,0x2a,0xcf,0xfe,0x2f,0xf5,0x28,
0x6a,0xb7,0x62,0xfd,0x72,0xa7,0xeb,0x27,0xbf,0x1c,0x26,0x1f,0x14,0xf2,0xe4,0x8c,0x53,0xc5,0x1d,0xc9,0xda,0xa2,0xe6,0x56,0xab,0xc6,0x89,0x97,0x86,0x7a,0x56,0x4d,
0x24,0x41,0xf3,0x8c,0xc8,0x9a,0x71,0x83,0x5e,0x1c,0x59,0x4a,0x87,0x1f,0xc2,0xd5,0x9e,0xed,0xcf,0x46,0xbb,0x25,0xb9,0x98,0xe5,0xd8,0xaa,0x3f,0xd1,0x33,0x09,0x73,
0x67,0xd9,0x23,0xed,0xec,0x58,0xf3,0x0f,0x81,0x1b,0x56,0xa9,0xd7,0xf9,0xac,0x27,0xef,0x5d,0xf6,0xff,0x00,0xff,0xd9 };

uint8_t jpeg_test_pattern_color_422h_expect[] = {
91,103,5,102,94,0,110,95,0,92,98,26,245,255,232,255,255,251,255,246,255,
255,246,255,0,26,139,211,235,255,48,16,161,255,205,255,155,69,46,255,243,161,
127,196,103,172,255,210,105,86,17,88,105,0,87,111,0,106,94,36,255,244,251,
247,255,253,230,255,237,255,251,255,255,208,255,182,67,62,239,233,111,
122,239,109,131,255,255,32,50,188,255,185,255,225,36,7,91,103,5,106,98,0,
108,93,0,90,96,24,245,255,232,255,255,251,255,246,255,255,246,255,6,34,144,
191,217,255,67,35,180,255,184,254,176,90,67,239,222,140,147,218,122,
162,255,200,109,92,22,94,111,0,87,109,0,110,98,40,255,241,248,247,255,251,
229,255,236,255,251,255,255,205,255,193,78,73,230,224,102,133,250,120,
119,245,255,41,59,197,255,173,255,229,38,10,251,255,255,255,252,249,
255,252,253,255,242,255,76,21,86,104,0,95,123,0,111,81,0,128,19,25,161,
183,214,255,71,44,183,255,172,248,186,97,79,232,217,132,152,224,125,
161,255,200,255,245,255,242,255,239,240,255,234,255,240,255,97,0,100,97,0,96,
81,11,83,89,6,86,255,195,255,187,75,64,234,233,106,125,239,115,131,254,255,
34,54,189,255,178,255,230,35,13,249,255,255,255,254,251,255,252,253,
255,246,255,73,18,83,107,0,97,118,0,106,78,0,125,16,22,158,194,225,255,
62,35,174,255,185,255,175,86,68,241,226,141,140,212,113,167,255,206,
255,245,255,242,255,239,240,255,236,255,240,255,98,0,101,100,0,98,78,6,79,
89,6,86,255,204,255,166,55,44,254,253,126,105,217,93,151,255,255,13,33,166,
255,200,255,220,25,3,205,250,207,192,255,192,193,255,193,213,244,212,
252,255,253,248,255,250,248,255,250,255,235,255,170,22,170,209,0,209,209,0,209,
195,4,195,196,5,196,205,0,205,205,0,203,197,3,195,205,251,205,192,255,192,
193,255,193,213,244,213,252,255,253,249,255,250,249,255,250,255,235,255,
169,21,169,208,0,208,208,0,208,194,3,194,194,3,194,204,0,204,204,0,204,
196,2,195,207,250,207,192,255,192,193,255,193,213,244,212,254,255,253,
249,255,250,249,255,248,255,235,255,170,20,169,210,0,208,208,0,208,194,3,194,
194,3,194,204,0,204,204,0,202,196,2,194,205,251,205,192,255,192,193,255,193,
213,244,212,254,255,253,249,255,248,248,255,248,255,235,255,165,17,165,
207,0,205,205,0,205,191,0,191,191,0,191,201,0,199,201,0,199,192,0,191,
203,253,204,196,255,196,196,255,197,207,248,208,248,255,248,255,254,255,
255,254,255,254,255,253,254,255,253,255,255,255,255,255,255,255,255,255,
255,255,255,255,254,255,255,255,255,255,255,253,203,253,202,196,255,196,
197,255,197,207,248,208,247,255,248,255,254,255,255,254,255,254,255,253,
254,255,253,255,255,255,255,255,255,255,255,255,255,255,255,254,254,254,
255,255,255,255,255,255,203,253,204,196,255,197,197,255,197,207,248,208,
248,255,248,255,253,255,255,254,255,254,255,253,255,255,253,255,253,254,
255,254,255,254,254,254,255,255,255,255,254,255,255,255,255,254,254,252,
203,253,202,196,255,196,197,255,197,207,248,208,248,255,248,255,253,255,
255,254,255,254,255,253,254,255,255,255,254,255,255,255,255,255,255,255,
254,254,254,255,253,254,255,254,255,255,255,255 };

uint8_t jpeg_test_pattern_color_422v[] = {
0xff,0xd8,0xff,0xe0,0x00,0x10,0x4a,0x46,0x49,0x46,0x00,0x01,0x01,0x01,0x00,0x48,0x00,0x48,0x00,0x00,0xff,0xdb,0x00,0x43,0x00,0x01,0x01,0x01,0x01,0x01,0x01,0x01,
0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,
0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0xff,0xdb,0x00,0x43,0x01,0x01,0x01,
0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,
0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0xff,0xc0,
0x00,0x11,0x08,0x00,0x10,0x00,0x10,0x03,0x01,0x12,0x00,0x02,0x11,0x01,0x03,0x11,0x01,0xff,0xc4,0x00,0x16,0x00,0x01,0x01,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x0a,0x05,0x09,0xff,0xc4,0x00,0x32,0x10,0x00,0x00,0x02,0x06,0x06,0x06,0x0b,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x15,0x16,
0x01,0x06,0x07,0x14,0x17,0x18,0x00,0x03,0x05,0x08,0x11,0x45,0x04,0x09,0x12,0x1a,0x21,0x31,0x13,0x24,0x26,0x41,0x65,0x66,0x68,0x71,0x85,0x98,0xc5,0xff,0xc4,0x00,
0x16,0x01,0x01,0x01,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x03,0x06,0xff,0xc4,0x00,0x2b,0x11,0x00,0x00,0x04,0x04,0x06,0x01,
0x02,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x04,0x05,0x06,0x02,0x07,0x13,0x14,0x01,0x08,0x11,0x12,0x15,0x16,0x17,0x26,0x33,0x21,0x22,0x23,0x32,0x34,
0x54,0x61,0xff,0xda,0x00,0x0c,0x03,0x01,0x00,0x02,0x11,0x03,0x11,0x00,0x3f,0x00,0xd0,0x06,0xae,0xd6,0x37,0x60,0x00,0x3b,0x3f,0x3b,0x93,0xb8,0x2b,0x9b,0x4b,0x84,
0x31,0x97,0x00,0xdf,0x0c,0x6f,0x87,0x73,0xbc,0x7d,0xf2,0xd1,0x74,0xb5,0x9c,0x8c,0xf5,0x15,0x38,0xca,0xb3,0xff,0x00,0x8b,0xfd,0x4a,0x62,0xa4,0x99,0x19,0x68,0xd3,
0xec,0xd6,0x32,0xf3,0x75,0xff,0x00,0x0d,0x57,0xd5,0x2b,0x58,0x69,0x6b,0xcb,0x6c,0xf7,0x62,0x1f,0xf6,0x63,0xfb,0x76,0xff,0x00,0x77,0x7c,0x34,0xa4,0xb7,0x99,0x48,
0x0b,0x7c,0xd7,0x69,0x64,0xf3,0xd6,0xdc,0x75,0x87,0xa8,0x4d,0xa6,0x5a,0x56,0xbe,0xba,0xfc,0x12,0x81,0xd7,0xaf,0x48,0xbf,0xbb,0xba,0x9d,0x1f,0x93,0x4a,0x91,0xea,
0x64,0xd9,0xe5,0x59,0x41,0x5b,0x53,0xeb,0xfa,0x22,0x4b,0x8d,0xb0,0xd3,0xec,0xd7,0x87,0x78,0x62,0x1e,0x53,0xbb,0x32,0xbf,0xa3,0x84,0xbe,0x03,0xdc,0x58,0x18,0x8f,
0x02,0xdd,0x8b,0xc6,0x15,0x12,0x18,0x40,0xb7,0x08,0x3b,0x73,0x99,0x51,0x29,0x6a,0xa3,0xaf,0xbb,0x17,0xeb,0x95,0x3f,0x59,0x3d,0xf8,0xe1,0x30,0xf8,0xa7,0x97,0x24,
0x62,0x9e,0x28,0xee,0x4e,0xd5,0x19,0xd3,0x11,0xa1,0x23,0xe6,0x4a,0x8b,0xdd,0x4d,0x5f,0x30,0xf6,0xc3,0xba,0x5a,0x83,0xb7,0x93,0x61,0xf1,0x9b,0xcd,0x67,0x85,0x36,
0x67,0x33,0x2a,0x59,0x8d,0x15,0x4e,0xba,0xd9,0xd1,0x4c,0x63,0xf5,0x94,0x62,0x69,0xed,0x4a,0x89,0x30,0xe8,0x94,0xfb,0x00,0xc7,0x62,0x1c,0x58,0xd3,0x70,0x5f,0x63,
0x2e,0xb2,0xc1,0x1b,0x94,0x8a,0x98,0x99,0xa3,0xdc,0x86,0x5d,0xcb,0x94,0xc7,0x49,0x94,0x5f,0x0a,0xbb,0xa2,0xb9,0x3d,0x95,0xf2,0xcb,0x20,0xc6,0x1d,0xb0,0xa3,0x44,
0xde,0x8f,0xbc,0x0a,0xaf,0x88,0xb7,0xe6,0xd2,0x0c,0x28,0xb7,0xe8,0x6a,0x20,0x8b,0x62,0x8b,0x88,0x90,0x7f,0xff,0xd9 };

uint8_t jpeg_test_pattern_color_422v_expect[] = {
98,99,5,94,95,1,98,99,5,98,99,5,255,253,255,255,253,255,255,253,255,
255,254,255,11,8,199,255,226,230,22,19,212,206,255,206,225,35,37,235,230,255,
57,241,59,255,230,233,97,96,0,99,96,0,102,99,0,104,103,0,250,255,249,
251,255,251,251,255,251,252,255,251,225,230,255,178,69,66,201,206,255,
120,237,120,255,178,173,45,49,157,138,255,139,166,57,54,101,100,0,102,99,0,
99,98,0,100,97,0,251,255,251,252,255,251,251,255,251,252,255,251,23,27,135,
255,184,179,46,50,158,128,255,129,189,82,76,197,203,255,117,234,117,
255,196,191,96,98,23,98,101,24,94,96,21,102,105,28,255,241,255,255,245,255,
255,245,255,255,246,255,232,228,255,209,70,75,202,198,255,124,253,126,
255,175,179,56,52,191,155,255,157,190,49,55,255,255,234,254,255,230,
255,255,232,250,253,226,88,15,88,80,7,80,84,12,85,81,9,82,26,22,161,255,187,192,
55,51,190,149,251,149,219,80,85,202,198,255,115,244,115,255,202,207,
255,252,255,255,253,255,255,253,255,255,253,255,105,0,104,105,0,104,106,0,106,
106,0,106,221,230,255,187,75,64,195,206,255,114,245,113,255,178,168,
43,53,166,128,255,128,171,59,48,255,253,255,255,253,255,255,253,255,
255,252,255,108,0,108,107,0,106,103,0,103,102,0,102,16,26,137,255,192,182,
38,50,162,127,255,127,191,79,68,197,208,255,102,233,103,255,200,190,
247,255,244,248,255,244,247,255,244,247,255,244,81,9,82,83,10,83,78,6,79,
82,10,83,255,227,255,205,30,73,255,215,255,119,205,118,255,203,248,53,9,184,
236,250,235,199,24,67,208,249,205,207,248,204,208,249,205,207,248,204,
255,246,255,255,245,255,255,246,255,255,246,255,167,23,170,209,6,150,167,23,170,
133,48,133,172,23,167,160,17,219,166,25,165,209,6,149,198,255,200,197,254,199,
197,255,200,197,255,197,252,255,253,252,255,251,252,255,251,252,255,251,
217,0,201,212,0,215,217,0,201,217,0,217,204,0,218,215,0,210,224,0,222,
212,0,215,197,255,200,197,254,199,197,255,200,197,255,197,252,255,253,
252,255,251,252,255,251,252,255,251,215,0,210,205,0,218,215,0,211,224,0,222,
212,0,215,217,0,201,217,0,217,204,0,218,201,254,200,200,253,199,201,254,200,
200,253,199,255,254,255,255,254,255,255,254,255,255,254,255,162,18,168,
167,18,162,163,18,171,162,21,161,169,17,162,163,19,166,160,22,159,165,18,161,
201,254,200,200,253,199,201,254,200,200,253,199,255,254,255,255,254,255,
255,254,255,255,254,255,255,237,255,255,235,255,255,236,255,255,240,255,
255,236,255,255,235,255,255,238,255,255,234,255,198,255,200,197,254,199,
198,255,200,197,254,199,254,255,255,254,255,255,254,255,255,254,255,253,
248,255,244,245,255,250,249,255,244,249,255,250,245,255,250,248,255,245,
252,255,251,247,255,250,198,255,200,197,254,199,198,255,200,197,254,199,
254,255,255,254,255,255,254,255,255,254,255,253,249,255,244,244,255,249,
249,255,246,250,255,250,245,255,250,249,255,244,251,255,250,244,255,249,
201,254,200,200,253,199,201,254,200,200,253,199,255,255,255,255,255,255,
255,254,255,255,254,255,255,251,255,255,250,255,255,250,255,255,253,255,
255,250,255,255,250,255,255,253,255,255,250,255 };

uint8_t jpeg_test_pattern_color_444[] = {
0xff,0xd8,0xff,0xe0,0x00,0x10,0x4a,0x46,0x49,0x46,0x00,0x01,0x01,0x01,0x00,0x48,0x00,0x48,0x00,0x00,0xff,0xdb,0x00,0x43,0x00,0x01,0x01,0x01,0x01,0x01,0x01,0x01,
0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,
0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0xff,0xdb,0x00,0x43,0x01,0x01,0x01,
0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,
0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0xff,0xc0,
0x00,0x11,0x08,0x00,0x10,0x00,0x10,0x03,0x01,0x11,0x00,0x02,0x11,0x01,0x03,0x11,0x01,0xff,0xc4,0x00,0x16,0x00,0x01,0x01,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x0a,0x06,0x09,0xff,0xc4,0x00,0x32,0x10,0x00,0x00,0x02,0x06,0x06,0x06,0x0b,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x15,0x16,
0x01,0x06,0x07,0x14,0x17,0x18,0x00,0x03,0x05,0x08,0x11,0x45,0x04,0x09,0x12,0x1a,0x21,0x31,0x13,0x24,0x26,0x41,0x65,0x66,0x68,0x71,0x85,0x98,0xc5,0xff,0xc4,0x00,
0x17,0x01,0x00,0x03,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x06,0x07,0x09,0x08,0xff,0xc4,0x00,0x39,0x11,0x00,0x00,0x02,0x05,0x05,
0x09,0x11,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x14,0x15,0x04,0x06,0x13,0x16,0x17,0x00,0x05,0x07,0x08,0x12,0x02,0x03,0x09,0x11,0x18,0x19,0x45,0x67,0x85,
0x22,0x25,0x26,0x42,0x43,0x44,0x46,0x62,0x63,0x64,0x66,0xa6,0xa7,0xc4,0xc5,0xe6,0xe7,0xff,0xda,0x00,0x0c,0x03,0x01,0x00,0x02,0x11,0x03,0x11,0x00,0x3f,0x00,0xd0,
0x06,0xae,0xd6,0x37,0x60,0x00,0x3b,0x3f,0x3b,0x93,0xb8,0x2b,0x9b,0x4b,0x84,0x31,0x97,0x00,0xdf,0x0c,0x6f,0x87,0x73,0xbc,0x7d,0xf2,0xd1,0x74,0xb5,0x9c,0x8c,0xf5,
0x11,0xda,0xb3,0xd5,0x9c,0x89,0xf8,0xe1,0xb8,0xa1,0x4e,0xd7,0x46,0x98,0xd8,0x60,0xf1,0x78,0x86,0xfb,0x6e,0xdb,0x5e,0xad,0x9c,0x5c,0x6c,0x72,0x72,0x28,0x0a,0x0c,
0x54,0x38,0xdf,0x72,0x22,0x20,0x1c,0xc0,0xcc,0x51,0x90,0xee,0xfb,0x37,0xb0,0x60,0x03,0xb5,0x68,0xd7,0x93,0xb1,0xba,0xb0,0x67,0x95,0x65,0x05,0x6d,0x4f,0xaf,0xe8,
0x89,0x2e,0x36,0xc3,0x4f,0xb3,0x5e,0x1d,0xe1,0x88,0x79,0x4e,0xec,0xca,0xfe,0x8e,0x12,0xf8,0x0f,0x71,0x60,0x62,0x3c,0x0b,0x76,0x2f,0x18,0x54,0x48,0x61,0x02,0xdc,
0x20,0xed,0xce,0x65,0x44,0xa5,0xaa,0x8d,0x99,0x58,0x94,0xf7,0xb9,0x64,0xa7,0x44,0xe3,0x37,0xd5,0xdc,0xa2,0xa4,0xf9,0xdc,0xc0,0xf2,0x26,0xba,0xa2,0xb0,0xa6,0x2d,
0x09,0x67,0x87,0x11,0x56,0xbc,0xf0,0xf8,0x63,0x51,0xaf,0x54,0x40,0xab,0x31,0x8b,0x53,0x68,0xfc,0xb5,0xb7,0x88,0x49,0xc1,0xf7,0x48,0x42,0x29,0x32,0x64,0x51,0x4b,
0xc4,0x99,0xd2,0x56,0x08,0x89,0xf6,0x1d,0x93,0x0d,0x36,0x6f,0x36,0xae,0xc9,0x2f,0x24,0x19,0x86,0xab,0x3b,0xc4,0x22,0xd0,0xb7,0xd7,0x37,0x75,0x28,0x0c,0xb4,0x65,
0x95,0x04,0xfc,0xd1,0xf6,0xbf,0xa6,0xc6,0x55,0x9f,0xfc,0x5f,0xea,0x51,0x1b,0x47,0xba,0x67,0x67,0xfb,0xc9,0x66,0xfa,0x2a,0xd3,0xfb,0x2f,0xe5,0x24,0x6a,0xb7,0x62,
0xfd,0x72,0xa7,0xeb,0x27,0xbf,0x1c,0x26,0x1f,0x14,0xf2,0xe4,0x8c,0x53,0xc5,0x1d,0xc9,0xda,0xa5,0x50,0xcb,0xc7,0x54,0xfe,0x7b,0xfa,0x5c,0xad,0x66,0x73,0x3d,0x47,
0xfa,0x97,0xf9,0xec,0xbf,0xff,0xd9 };

uint8_t jpeg_test_pattern_color_444_expect[] = {
99,99,0,95,96,0,99,99,0,98,101,0,255,254,255,255,255,255,255,255,255,
255,255,255,0,3,255,247,247,235,11,14,255,236,243,235,255,16,16,238,238,248,
8,255,7,253,246,253,97,95,0,96,97,0,99,100,0,101,104,1,254,252,255,255,255,255,
255,255,255,254,255,255,242,247,243,255,26,19,221,219,232,33,255,33,227,220,214,
33,30,255,233,227,229,255,15,11,99,99,0,99,100,0,97,98,0,96,99,0,255,254,255,
255,255,255,255,255,255,255,255,255,9,9,255,228,228,216,30,33,255,213,223,214,
255,36,44,212,217,239,25,255,23,250,233,239,100,101,0,101,104,1,98,99,0,
103,109,3,251,249,250,255,255,255,254,254,252,254,255,253,238,246,231,
255,38,27,212,209,228,44,255,46,219,206,197,47,38,255,223,213,221,255,19,21,
255,255,255,253,253,253,255,255,255,249,249,249,104,3,109,97,0,97,101,0,104,
98,0,99,10,10,255,223,223,213,37,40,255,203,213,204,255,45,55,204,212,235,
28,255,26,251,230,235,255,255,255,254,255,255,254,255,255,255,255,253,
98,0,98,98,0,96,100,0,100,99,0,98,240,246,236,255,32,24,219,216,233,
37,255,37,227,216,210,39,32,255,228,219,224,255,17,18,255,255,255,254,255,255,
254,255,255,254,254,252,101,0,104,100,0,98,97,0,97,95,0,94,7,7,255,233,235,222,
28,31,255,215,225,217,255,34,38,217,220,239,19,255,18,249,236,246,255,255,255,
254,255,255,254,255,255,255,255,253,98,0,99,100,0,98,96,0,94,99,0,98,250,251,253,
255,12,4,239,238,246,12,255,15,242,238,235,13,13,255,245,244,240,255,5,3,
200,255,200,197,254,199,200,255,198,197,254,199,255,254,255,255,255,255,
255,254,255,255,255,255,201,0,200,201,0,200,201,0,200,201,0,200,202,1,201,
201,0,200,201,0,200,201,0,200,200,255,200,197,254,199,200,255,198,197,254,199,
255,254,255,255,255,255,255,254,255,255,255,255,200,0,199,200,0,199,200,0,199,
200,0,199,200,0,199,200,0,199,200,0,199,200,0,199,200,255,200,197,254,199,
200,255,198,197,254,199,255,254,255,255,255,255,255,254,255,255,255,255,
200,0,199,200,0,199,200,0,199,200,0,199,200,0,199,200,0,199,200,0,199,
200,0,199,200,255,200,197,254,199,200,255,198,197,254,199,255,254,255,
255,255,255,255,254,255,255,255,255,199,0,198,200,0,199,200,0,199,200,0,199,
200,0,199,200,0,199,200,0,199,199,0,198,200,255,200,197,254,199,200,255,198,
197,254,199,255,254,255,255,255,255,255,254,255,255,255,255,252,255,251,
252,255,251,252,255,251,252,255,251,252,255,251,252,255,251,252,255,251,
252,255,251,200,255,200,197,254,199,200,255,198,197,254,199,255,254,255,
255,255,255,255,254,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,254,254,254,255,255,255,255,255,255,200,255,200,
197,254,199,200,255,198,197,254,199,255,254,255,255,255,255,255,254,255,
255,255,255,255,255,255,254,254,254,255,255,255,254,254,254,255,255,255,
255,255,255,255,255,255,254,254,254,200,255,200,197,254,199,200,255,198,
197,254,199,255,254,255,255,255,255,255,254,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,254,254,254,254,254,254,255,255,255,
255,255,255 };

TEST_CASE("Bitsteram read test", "[sample]")
{
    uint8_t buffer[9] = { 0xfa, 0xab, 0x32, 0xb3, 0xf8, 0xc3, 0xaa, 0xaa, 0xbb };
    mameJpeg_memory_callback_param param = { buffer, 0, sizeof( buffer ) / sizeof( uint8_t ) };
    mameBitstream_context bitstream[1];
    mameBitstream_input_initialize( bitstream, mameJpeg_input_from_memory_callback, mameJpeg_rewind_memory_callback, &param  );

    uint8_t data8 = 0;
    CHECK( mameBitstream_readBits(bitstream, &data8, 1, 1 ) );
    CHECK( data8 == 0x01 );
    CHECK( mameBitstream_readBits(bitstream, &data8, 1, 1 ) );
    CHECK( data8 == 0x01 );
    CHECK( mameBitstream_readBits(bitstream, &data8, 1, 1 ) );
    CHECK( data8 == 0x01 );
    CHECK( mameBitstream_readBits(bitstream, &data8, 1, 1 ) );
    CHECK( data8 == 0x01 );

    CHECK( mameBitstream_readBits(bitstream, &data8, 1, 3 ) );
    CHECK( data8 == 0x05 );
    CHECK( mameBitstream_readBits(bitstream, &data8, 1, 3 ) );
    CHECK( data8 == 0x02 );
  
    CHECK( mameBitstream_readBits(bitstream, &data8, 1, 8 ) );
    CHECK( data8 == 0xac );

    uint16_t data16 = 0;
    CHECK( mameBitstream_readBits(bitstream, &data16, 2, 12 ) );
    CHECK( data16 == 0xcac );
 
    uint32_t data32 = 0;
    CHECK( mameBitstream_readBits(bitstream, &data32, 4, 18 ) );
    CHECK(data32 == 0x3f8c3 );

    CHECK( mameBitstream_readBits(bitstream, &data8, 1, 8 ) );
    CHECK( data8 == 0xaa );

    CHECK( mameBitstream_readBits(bitstream, &data16, 2, 16 ) );
    CHECK( data16 == 0xaabb );

}

TEST_CASE("Bitsteram write test", "[sample]")
{
    uint8_t buffer[9];
    mameBitstream_context bitstream[1];
    mameJpeg_memory_callback_param param = { buffer, 0, sizeof( buffer ) / sizeof( uint8_t ) };
    mameBitstream_output_initialize( bitstream, mameJpeg_output_to_memory_callback, mameJpeg_rewind_memory_callback, &param  );

    uint8_t data8 = 0x01;
    CHECK( mameBitstream_writeBits(bitstream, &data8, 1 ) );
    data8 = 0x01;
    CHECK( mameBitstream_writeBits(bitstream, &data8, 1 ) );
    data8 = 0x01;
    CHECK( mameBitstream_writeBits(bitstream, &data8, 1 ) );
    data8 = 0x01;
    CHECK( mameBitstream_writeBits(bitstream, &data8, 1 ) );

    data8 = 0x05;
    CHECK( mameBitstream_writeBits(bitstream, &data8, 3 ) );
    data8 = 0x02;
    CHECK( mameBitstream_writeBits(bitstream, &data8, 3 ) );
  
    data8 = 0xac;
    CHECK( mameBitstream_writeBits(bitstream, &data8, 8 ) );

    uint16_t data16 = 0xcac;
    CHECK( mameBitstream_writeBits(bitstream, &data16, 12 ) );
 
    uint32_t data32 = 0x3f8c3;
    CHECK( mameBitstream_writeBits(bitstream, &data32, 18 ) );

    data8 = 0xaa;
    CHECK( mameBitstream_writeBits(bitstream, &data8, 8 ) );
    data16 = 0xaabb;
    CHECK( mameBitstream_writeBits(bitstream, &data16, 16 ) );
    
    int res = memcmp( buffer, "\xfa\xab\x32\xb3\xf8\xc3\xaa\xaa\xbb", sizeof( buffer ) / sizeof( uint8_t ) );
    CHECK( res == 0 );
}

TEST_CASE("Get image info", "[getImageInfo]")
{
    uint16_t width;
    uint16_t height;
    uint8_t components;
    mameJpeg_memory_callback_param input_param = { (void*)jpeg_test_pattern_binary, 0, sizeof( jpeg_test_pattern_binary) / sizeof( uint8_t ) };
    mameJpeg_getImageInfo( mameJpeg_input_from_memory_callback,
                           mameJpeg_rewind_memory_callback,
                           &input_param,
                           &width,
                           &height,
                           &components );

    CHECK( width == 16 );
    CHECK( height == 16 );
    CHECK( components == 1 );
}

TEST_CASE("Decode binary jpeg", "[sample]")
{
    struct {
        uint8_t* data;
        uint8_t* expect;
        size_t size;
    } datas[] = {
        { jpeg_test_pattern_binary, jpeg_test_pattern_binary_expect, sizeof( jpeg_test_pattern_binary ) },
        { jpeg_test_pattern_grayscale, jpeg_test_pattern_grayscale_expect, sizeof( jpeg_test_pattern_grayscale ) },
        //{ jpeg_test_pattern_color_420, jpeg_test_pattern_color_420_expect, sizeof( jpeg_test_pattern_color_420 ) },
        //{ jpeg_test_pattern_color_422h, jpeg_test_pattern_color_422h_expect, sizeof( jpeg_test_pattern_color_422h ) },
        //{ jpeg_test_pattern_color_422v, jpeg_test_pattern_color_422v_expect, sizeof( jpeg_test_pattern_color_422v ) },
        { jpeg_test_pattern_color_444, jpeg_test_pattern_color_444_expect,  sizeof( jpeg_test_pattern_color_444 ) },
    };

    for( int i = 0; i < sizeof( datas ) / sizeof( datas[0] ); i++ )
    {
        uint16_t width;
        uint16_t height;
        uint8_t components;
        mameJpeg_memory_callback_param info_input_param = {
            (void*)datas[i].data,
            0,
            datas[i].size
        };
        mameJpeg_getImageInfo( mameJpeg_input_from_memory_callback,
                mameJpeg_rewind_memory_callback,
                &info_input_param,
                &width,
                &height,
                &components );
        printf("%d - %d - %d\n", width, height, components );

        mameJpeg_memory_callback_param input_param = {
            (void*)datas[i].data,
            0,
            datas[i].size
        };
        size_t decode_image_buffer_size = components * width * height;
        uint8_t decode_image_buffer[ decode_image_buffer_size ];
        mameJpeg_memory_callback_param output_param = {
            decode_image_buffer,
            0,
            decode_image_buffer_size
        };
        mameJpeg_context context[1];
        mameJpeg_initialize( context,
                mameJpeg_input_from_memory_callback,
                mameJpeg_rewind_memory_callback,
                &input_param,
                mameJpeg_output_to_memory_callback,
                mameJpeg_rewind_memory_callback,
                &output_param,
                MAMEJPEG_DECODE );

        size_t work_buffer_size;
        mameJpeg_getWorkBufferSize( context, &work_buffer_size );

        uint8_t work_buffer[ work_buffer_size ];
        memset( work_buffer, 0x00, work_buffer_size );
        mameJpeg_setWorkBuffer( context, work_buffer, work_buffer_size );

        mameJpeg_decode( context );

        double diff_sum = 0.0;
        int pixels = components * width * height;
        for( int j = 0; j < pixels; j++ )
        {
            uint8_t v = decode_image_buffer[ j ];
            uint8_t e = datas[i].expect[ j ];

            printf("%4d%c", v, ( ( j + 1 ) % ( components * width ) == 0 ) ? '\n' : ' '  );
            diff_sum += abs( v - e );
        }
        diff_sum /= pixels;
        printf("diff sum:%lf\n", diff_sum );
        CHECK( diff_sum < 1.0 );

        //mameJpeg_dumpHeader( context );
        //size_t size;
        //mameBitmap_encodeToFile( decode_image_buffer, 1024 * 1024, "./out.pgm", context->info.width, context->info.height, MAMEBITMAP_FORMAT_PGM_ASCII, 255, &size );
    }
}
#if 0
TEST_CASE("Decode grayscale jpeg", "[sample]")
{
    uint16_t width;
    uint16_t height;
    uint8_t components;
    mameJpeg_memory_callback_param info_input_param = {
        (void*)jpeg_test_pattern_binary,
        0,
        sizeof( jpeg_test_pattern_binary) / sizeof( uint8_t )
    };
    mameJpeg_getImageInfo( mameJpeg_input_from_memory_callback,
            mameJpeg_rewind_memory_callback,
                           &info_input_param,
                           &width,
                           &height,
                           &components );

    mameJpeg_memory_callback_param input_param = {
        (void*)jpeg_test_pattern_binary,
        0,
        sizeof( jpeg_test_pattern_binary) / sizeof( uint8_t )
    };
    size_t decode_image_buffer_size = components * width * height;
    uint8_t decode_image_buffer[ decode_image_buffer_size ];
    mameJpeg_memory_callback_param output_param = {
        decode_image_buffer,
        0,
        decode_image_buffer_size
    };
    mameJpeg_context context[1];
    mameJpeg_initialize( context,
                         mameJpeg_input_from_memory_callback,
                         mameJpeg_rewind_memory_callback,
                         &input_param,
                         mameJpeg_output_to_memory_callback,
                         mameJpeg_rewind_memory_callback,
                         &output_param,
                         MAMEJPEG_FORMAT_Y,
                         MAMEJPEG_DECODE );

    size_t work_buffer_size;
    mameJpeg_getWorkBufferSize( context, &work_buffer_size );

    uint8_t work_buffer[ work_buffer_size ];
    mameJpeg_setWorkBuffer( context, work_buffer, work_buffer_size );

    mameJpeg_decode( context );

    for( int y = 0; y < 16; y++ )
    {
        for( int x = 0; x < 16; x++ )
        {
            printf("%4d ", decode_image_buffer[ 16 * y + x ] );
        }
        printf("\n");
    }

    size_t size;
    mameBitmap_encodeToFile( decode_image_buffer, 1024 * 1024, "./out.pgm", context->info.width, context->info.height, MAMEBITMAP_FORMAT_PGM_ASCII, 255, &size );

    //mameJpeg_dumpHeader( context );
}

TEST_CASE("Decode yuv jpeg", "[sample]")
{
    uint16_t width;
    uint16_t height;
    uint8_t components;
    size_t work_buffer_size;
    mameJpeg_memory_callback_param info_input_param = {
        (void*)jpeg_test_pattern_binary,
        0,
        sizeof( jpeg_test_pattern_binary ) / sizeof( uint8_t )
    };
    mameJpeg_getImageInfo( mameJpeg_input_from_memory_callback,
                         mameJpeg_rewind_memory_callback,
                           &info_input_param,
                           &width,
                           &height,
                           &components );

    mameJpeg_memory_callback_param input_param = {
        (void*)jpeg_test_pattern_binary,
        0,
        sizeof( jpeg_test_pattern_binary ) / sizeof( uint8_t )
    };
    size_t decode_image_buffer_size = components * width * height;
    uint8_t decode_image_buffer[ decode_image_buffer_size ];
    mameJpeg_memory_callback_param output_param = {
        decode_image_buffer,
        0,
        decode_image_buffer_size
    };
    mameJpeg_context context[1];
    mameJpeg_initialize( context,
                         mameJpeg_input_from_memory_callback,
                         mameJpeg_rewind_memory_callback,
                         &input_param,
                         mameJpeg_output_to_memory_callback,
                         mameJpeg_rewind_memory_callback,
                         &output_param,
                         MAMEJPEG_FORMAT_YUV,
                         MAMEJPEG_DECODE );

    mameJpeg_getWorkBufferSize( context, &work_buffer_size );

    uint8_t work_buffer[ work_buffer_size ];
    mameJpeg_setWorkBuffer( context, work_buffer, work_buffer_size );

    mameJpeg_setWorkBuffer( context, work_buffer, work_buffer_size );
    mameJpeg_decode( context );

    for( int y = 0; y < 16; y++ )
    {
        for( int x = 0; x < 16; x++ )
        {
            printf("%4d ", decode_image_buffer[ 16 * y + x ] );
        }
        printf("\n");
    }

    size_t size;
    mameBitmap_encodeToFile( decode_image_buffer, 1024 * 1024, "./out.pgm", context->info.width, context->info.height, MAMEBITMAP_FORMAT_PGM_ASCII, 255, &size );

    //mameJpeg_dumpHeader( context );
}

TEST_CASE("Decode rgb jpeg", "[sample]")
{
    uint16_t width;
    uint16_t height;
    uint8_t components;
    size_t work_buffer_size;
    mameJpeg_memory_callback_param info_input_param = {
        (void*)jpeg_test_pattern_binary,
        0,
        sizeof( jpeg_test_pattern_binary ) / sizeof( uint8_t )
    };
    mameJpeg_getImageInfo( mameJpeg_input_from_memory_callback,
                           mameJpeg_rewind_memory_callback,
                           &info_input_param,
                           &width,
                           &height,
                           &components );

    mameJpeg_memory_callback_param input_param = {
        (void*)jpeg_test_pattern_binary,
        0,
        sizeof( jpeg_test_pattern_binary ) / sizeof( uint8_t )
    };
    size_t decode_image_buffer_size = components * width * height;
    uint8_t decode_image_buffer[ decode_image_buffer_size ];
    mameJpeg_memory_callback_param output_param = {
        decode_image_buffer,
        0,
        decode_image_buffer_size
    };
    mameJpeg_context context[1];
    mameJpeg_initialize( context,
                         mameJpeg_input_from_memory_callback,
                         mameJpeg_rewind_memory_callback,
                         &input_param,
                         mameJpeg_output_to_memory_callback,
                         mameJpeg_rewind_memory_callback,
                         &output_param,
                         MAMEJPEG_FORMAT_RGB,
                         MAMEJPEG_DECODE );

    mameJpeg_getWorkBufferSize( context, &work_buffer_size );

    uint8_t work_buffer[ work_buffer_size ];
    mameJpeg_setWorkBuffer( context, work_buffer, work_buffer_size );

    mameJpeg_setWorkBuffer( context, work_buffer, work_buffer_size );
    mameJpeg_decode( context );

    for( int y = 0; y < 16; y++ )
    {
        for( int x = 0; x < 16; x++ )
        {
            printf("%4d ", decode_image_buffer[ 16 * y + x ] );
        }
        printf("\n");
    }

    size_t size;
    mameBitmap_encodeToFile( decode_image_buffer, 1024 * 1024, "./out.pgm", context->info.width, context->info.height, MAMEBITMAP_FORMAT_PGM_ASCII, 255, &size );

    //mameJpeg_dumpHeader( context );
}
#endif 
